// ==UserScript==
// @name         Advanced IR Editor Pro Controller
// @namespace    amazon_ir_editor_unified_controls
// @version      11.0
// @description  A professional suite for IR editing with swipe mode, a draggable resizer, annotation, dark mode, a settings panel, and a framework for future AI features.
// @match        https://ir-editor.amazon.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function () {
    'use strict';

    // --- STYLES ---
    const style = document.createElement('style');
    style.textContent = `
        :root {
            --bg-primary: #ffffff; --bg-secondary: #f5f5f5; --text-primary: #333; --border-color: #ddd;
        }
        .dark-mode {
            --bg-primary: #2d3436; --bg-secondary: #485460; --text-primary: #dfe6e9; --border-color: #555;
        }
        .is-hidden-by-swipe { display: none !important; }

        #unified-controls-deck {
            position: fixed; top: 80px; right: 20px; z-index: 10001; background: var(--bg-primary);
            border: 1px solid var(--border-color); border-radius: 8px; padding: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2); font-family: Arial, sans-serif;
            display: flex; flex-direction: column; gap: 8px; width: 200px;
        }
        #unified-controls-deck button, #unified-controls-deck .icon-btn {
            padding: 10px; font-size: 14px; border-radius: 5px; cursor: pointer;
            font-weight: bold; border: 1px solid var(--border-color);
            background: var(--bg-secondary); color: var(--text-primary); text-align: center;
        }
        #unified-controls-deck button#activate-swipe-mode { background: #28a745; color: white; border-color: #28a745; }
        #unified-controls-deck button:disabled { opacity: 0.5; cursor: not-allowed; }
        #unified-controls-deck .icon-btn { font-size: 20px; padding: 5px; }

        #swipe-card-overlay {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(100, 100, 100, 0.5); backdrop-filter: blur(8px);
            z-index: 10000; display: none; flex-direction: column; justify-content: center; align-items: center;
        }
        .dark-mode #swipe-card-overlay { background: rgba(0, 0, 0, 0.7); }

        #swipe-card-main {
            background: var(--bg-primary); color: var(--text-primary);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1); border: 1px solid var(--border-color);
            border-radius: 8px; width: 98vw; max-width: 98vw; height: 98vh;
            display: flex; flex-direction: column; overflow: hidden; position: relative;
        }
        #swipe-card-body { flex-grow: 1; display: flex; overflow: hidden; user-select: none; }
        #panel-resizer { flex-basis: 5px; flex-shrink: 0; background-color: #888; cursor: col-resize; }
        #swipe-prompt-container, #swipe-item-container {
            overflow-y: auto; padding: 25px; height: 100%; flex-grow: 0; flex-shrink: 0;
        }
        #swipe-prompt-container { flex-basis: 50%; border-right: 1px solid var(--border-color); }
        #swipe-item-container { flex-basis: 50%; }
        #swipe-card-footer {
            flex-shrink: 0; padding: 15px; background: var(--bg-primary);
            border-top: 1px solid var(--border-color); display: flex; gap: 10px;
            justify-content: center; align-items: center; position: relative;
        }
        #swipe-card-footer button {
            padding: 10px 20px; font-size: 14px; font-weight: bold; border-radius: 5px;
            cursor: pointer; border: 1px solid var(--border-color);
            background: var(--bg-secondary); color: var(--text-primary);
        }
        #swipe-card-footer button#submit-swipe-btn { background: #007bff; color: white; border-color: #007bff; }
        #decision-buttons-container { display: flex; gap: 10px; }
        #swipe-progress { position: absolute; left: 25px; top: 50%; transform: translateY(-50%); font-weight: bold; }

        /* Note Taking UI */
        #note-container { margin-top: 15px; padding-top: 15px; border-top: 1px dashed var(--border-color); }
        #note-display { background: var(--bg-secondary); padding: 10px; border-radius: 5px; white-space: pre-wrap; }
        #note-input-area { display: none; flex-direction: column; gap: 5px; }
        #note-input-area textarea { width: 100%; height: 80px; background: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-color); }

        /* Settings Modal */
        #settings-modal {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            z-index: 10002; background: rgba(0,0,0,0.6);
            display: none; justify-content: center; align-items: center;
        }
        #settings-panel {
            background: var(--bg-primary); color: var(--text-primary);
            padding: 25px; border-radius: 8px; width: 500px;
        }
        .settings-row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
    `;
    document.head.appendChild(style);


    // --- HTML ---
    const controlsContainer = document.createElement('div');
    controlsContainer.id = 'unified-controls-deck';
    controlsContainer.innerHTML = `
        <button id="activate-swipe-mode">Swipe Mode</button>
        <button id="triage-mode" disabled title="Future: One-to-Many Comparison">Triage Mode</button>
        <button id="sort-by-match" disabled title="Future: AI-Assisted Sorting">Sort by Match %</button>
        <button id="settings-btn" class="icon-btn" title="Settings">⚙️</button>
    `;
    document.body.appendChild(controlsContainer);

    const overlay = document.createElement('div');
    overlay.id = 'swipe-card-overlay';
    overlay.innerHTML = `
        <div id="swipe-card-main">
            <button class="swipe-close-btn" title="Close (Esc)">X</button>
            <div id="swipe-card-body">
                <div id="swipe-prompt-container"></div>
                <div id="panel-resizer"></div>
                <div id="swipe-item-container"></div>
            </div>
            <div id="swipe-card-footer"></div>
        </div>
    `;
    document.body.appendChild(overlay);

    const settingsModal = document.createElement('div');
    settingsModal.id = 'settings-modal';
    settingsModal.innerHTML = `
        <div id="settings-panel">
            <h3>Settings</h3>
            <div class="settings-row">
                <label for="dark-mode-toggle">Dark Mode</label>
                <input type="checkbox" id="dark-mode-toggle" />
            </div>
            <button id="close-settings-btn">Close</button>
        </div>
    `;
    document.body.appendChild(settingsModal);


    // --- STATE & UI REFERENCES ---
    let swipeState = { items: [], currentIndex: 0, currentItemElement: null, currentPlaceholder: null };
    const ui = {
        controls: document.getElementById('unified-controls-deck'),
        swipeBtn: document.getElementById('activate-swipe-mode'),
        settingsBtn: document.getElementById('settings-btn'),
        overlay: document.getElementById('swipe-card-overlay'),
        promptContainer: document.getElementById('swipe-prompt-container'),
        itemContainer: document.getElementById('swipe-item-container'),
        resizer: document.getElementById('panel-resizer'),
        footer: document.getElementById('swipe-card-footer'),
        closeBtn: overlay.querySelector('.swipe-close-btn'),
        settingsModal: document.getElementById('settings-modal'),
        closeSettingsBtn: document.getElementById('close-settings-btn'),
        darkModeToggle: document.getElementById('dark-mode-toggle'),
    };

    // --- LOGIC ---

    // Dark Mode & Settings
    function applyDarkMode(isDark) {
        ui.darkModeToggle.checked = isDark;
        document.body.classList.toggle('dark-mode', isDark);
    }
    function toggleSettingsModal(show) {
        ui.settingsModal.style.display = show ? 'flex' : 'none';
    }
    applyDarkMode(GM_getValue('darkMode', false)); // Load saved preference

    // Main Visibility & Background Control
    function getGridContainer() { return document.querySelector('.label-map-grid-item')?.parentElement; }
    function toggleBackgroundElements(shouldHide) {
        const gridContainer = getGridContainer();
        if (!gridContainer || !gridContainer.parentElement) return;
        Array.from(gridContainer.parentElement.children).forEach(sibling => {
            if (sibling !== gridContainer) sibling.classList.toggle('is-hidden-by-swipe', shouldHide);
        });
    }
    function moveCurrentItemBack() {
        if (swipeState.currentItemElement && swipeState.currentPlaceholder) {
            swipeState.currentItemElement.querySelector('.label-map-label-buttons-container')?.style.removeProperty('display');
            swipeState.currentPlaceholder.parentNode.replaceChild(swipeState.currentItemElement, swipeState.currentPlaceholder);
        }
        swipeState.currentItemElement = null; swipeState.currentPlaceholder = null;
    }

    function openSwipeMode() {
        swipeState.items = Array.from(document.querySelectorAll('.label-map-grid-item'));
        if (swipeState.items.length === 0) return alert("No grid items found.");
        swipeState.currentIndex = 0;
        toggleBackgroundElements(true);
        ui.controls.style.display = 'none';
        ui.overlay.style.display = 'flex';
        renderCurrentCard();
    }
    function closeSwipeMode() {
        moveCurrentItemBack();
        toggleBackgroundElements(false);
        ui.overlay.style.display = 'none';
        ui.controls.style.display = 'block';
    }

    function getUniqueItemId(itemElement) {
        // Find a unique piece of text or attribute to use as a key for storage.
        // This selector may need to be adjusted for the specific page structure.
        const idElement = itemElement.querySelector('[data-asin], [id], .product-id');
        if (idElement) return idElement.textContent.trim();
        // Fallback to a hash of the content if no reliable ID is found
        const text = itemElement.textContent.slice(0, 200);
        return 'itemhash_' + text.split('').reduce((a, b) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0);
    }

    // Main Card Rendering
    function renderCurrentCard() {
        moveCurrentItemBack();
        if (swipeState.items.length === 0 || swipeState.currentIndex >= swipeState.items.length) return closeSwipeMode();

        const itemToMove = swipeState.items[swipeState.currentIndex];
        const uniqueId = getUniqueItemId(itemToMove);

        // --- Setup UI Panels ---
        ui.promptContainer.innerHTML = '<h4>Prompt</h4>';
        ui.itemContainer.innerHTML = '<h4>Grid Item</h4>';
        ui.footer.innerHTML = '';
        const promptClone = document.querySelector('.prompt-item')?.cloneNode(true);
        if (promptClone) ui.promptContainer.appendChild(promptClone);

        // --- Move Item and Hide Originals ---
        const placeholder = document.createElement('div');
        itemToMove.parentNode.replaceChild(placeholder, itemToMove);
        swipeState.currentItemElement = itemToMove;
        swipeState.currentPlaceholder = placeholder;
        ui.itemContainer.appendChild(itemToMove);
        itemToMove.querySelector('.label-map-label-buttons-container').style.display = 'none';

        // --- Notes Feature ---
        const noteContainer = document.createElement('div');
        noteContainer.id = 'note-container';
        const savedNote = GM_getValue(`note_${uniqueId}`, '');
        noteContainer.innerHTML = `
            <h5>Annotation</h5>
            <div id="note-display" style="display: ${savedNote ? 'block' : 'none'};">${savedNote}</div>
            <div id="note-input-area">
                <textarea>${savedNote}</textarea>
                <button id="save-note-btn">Save Note</button>
            </div>
        `;
        ui.promptContainer.appendChild(noteContainer);
        const noteDisplay = noteContainer.querySelector('#note-display');
        const noteInputArea = noteContainer.querySelector('#note-input-area');
        noteContainer.querySelector('#save-note-btn').addEventListener('click', (e) => {
            const newNote = noteInputArea.querySelector('textarea').value;
            GM_setValue(`note_${uniqueId}`, newNote);
            noteDisplay.textContent = newNote;
            noteDisplay.style.display = newNote ? 'block' : 'none';
            noteInputArea.style.display = 'none';
        });

        // --- Footer Buttons ---
        const decisionBtnContainer = document.createElement('div');
        decisionBtnContainer.id = 'decision-buttons-container';
        const buttonsInItem = itemToMove.querySelectorAll('.label-map-label-button');
        buttonsInItem.forEach(originalBtn => {
            const footerBtn = originalBtn.cloneNode(true);
            footerBtn.addEventListener('click', () => {
                originalBtn.click();
                swipeState.items.splice(swipeState.currentIndex, 1);
                renderCurrentCard();
            });
            decisionBtnContainer.appendChild(footerBtn);
        });

        const progressText = document.createElement('div');
        progressText.id = 'swipe-progress';
        progressText.innerText = `${swipeState.currentIndex + 1} of ${swipeState.items.length}`;

        const noteBtn = document.createElement('button');
        noteBtn.textContent = 'Take Note';
        noteBtn.onclick = () => { noteInputArea.style.display = 'flex'; };

        const submitBtn = document.createElement('button');
        submitBtn.id = 'submit-swipe-btn';
        submitBtn.textContent = 'Submit';
        // ... (prev/next/submit buttons setup as before) ...
        const prevBtn = document.createElement('button'); // ...
        const nextBtn = document.createElement('button'); // ...
        prevBtn.textContent = '← Prev';
        prevBtn.disabled = swipeState.currentIndex === 0;
        prevBtn.onclick = () => { if (swipeState.currentIndex > 0) { swipeState.currentIndex--; renderCurrentCard(); } };
        nextBtn.textContent = 'Next →';
        nextBtn.disabled = swipeState.currentIndex >= swipeState.items.length - 1;
        nextBtn.onclick = () => { if (swipeState.currentIndex < swipeState.items.length - 1) { swipeState.currentIndex++; renderCurrentCard(); } };


        ui.footer.appendChild(progressText);
        ui.footer.appendChild(prevBtn);
        ui.footer.appendChild(decisionBtnContainer);
        ui.footer.appendChild(nextBtn);
        ui.footer.appendChild(noteBtn);
        ui.footer.appendChild(submitBtn);
    }
    
    // --- Draggable Resizer Logic ---
    function initDraggableResizer() { /* (No changes from previous version) */ }
    initDraggableResizer(); // Placeholder for the unchanged resizer logic from before

    // --- EVENT LISTENERS ---
    ui.swipeBtn.addEventListener('click', openSwipeMode);
    ui.closeBtn.addEventListener('click', closeSwipeMode);
    ui.settingsBtn.addEventListener('click', () => toggleSettingsModal(true));
    ui.closeSettingsBtn.addEventListener('click', () => toggleSettingsModal(false));
    ui.settingsModal.addEventListener('click', (e) => { if(e.target.id === 'settings-modal') toggleSettingsModal(false); });
    ui.darkModeToggle.addEventListener('change', (e) => {
        applyDarkMode(e.target.checked);
        GM_setValue('darkMode', e.target.checked); // Save preference
    });
    window.addEventListener('keydown', e => {
        if (ui.overlay.style.display === 'flex' && e.key === 'Escape') closeSwipeMode();
    });

})();

// NOTE: The draggable resizer logic would be placed where the placeholder comment is.
// It is omitted here for brevity as it was unchanged from the previous version.
