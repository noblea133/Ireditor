// ==UserScript==
// @name         Enhanced IR Editor Grid & Swipe Controller
// @namespace    amazon_ir_editor_unified_controls
// @version      5.3
// @description  A unified script to control grid layout and activate a two-column swipe view with full navigation.
// @match        https://ir-editor.amazon.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const style = document.createElement('style');
    style.textContent = `
        #unified-ir-controls {
            position: fixed; top: 80px; right: 20px; z-index: 9999;
            background: #fff; border: 1px solid #ccc; border-radius: 8px;
            padding: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            font-family: Arial, sans-serif; width: 180px; display: block;
        }
        #unified-ir-controls h4 {
            margin: 0 0 10px 0; font-size: 14px; text-align: center;
            border-bottom: 1px solid #eee; padding-bottom: 8px;
        }
        #unified-ir-controls label {
            font-size: 13px; font-weight: bold; display: block; margin-top: 10px;
        }
        #unified-ir-controls input, #unified-ir-controls button {
            width: 100%; margin-top: 5px; padding: 8px; font-size: 13px;
            box-sizing: border-box; border-radius: 5px; border: 1px solid #ccc;
        }
        #unified-ir-controls button {
            cursor: pointer; background: #0077cc; color: white; font-weight: bold; border: none;
        }
        #unified-ir-controls button#reset-grid-layout { background: #6c757d; }

        .custom-fluid-grid {
            display: grid !important;
            grid-template-columns: repeat(var(--col-count, 4), 1fr);
            gap: 15px;
            overflow-y: auto;
        }
        .custom-fluid-grid > * { min-width: 0; }

        #swipe-card-overlay {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(245, 245, 245, 0.98); backdrop-filter: blur(8px);
            z-index: 10000; display: none; flex-direction: column;
            justify-content: center; align-items: center;
        }
        #swipe-card-main {
            background: #fff; box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border: 1px solid #ddd; border-radius: 8px; width: 95%;
            max-width: 1200px; height: 90vh; display: flex; flex-direction: column;
            overflow: hidden; position: relative;
        }
        .swipe-close-btn {
            position: absolute; top: 10px; right: 10px; background: #333;
            color: white; border: none; width: 30px; height: 30px; border-radius: 50%;
            cursor: pointer; font-weight: bold; font-size: 14px;
            line-height: 30px; text-align: center; z-index: 10;
        }
        #swipe-card-body {
            flex-grow: 1; display: flex; overflow: hidden;
        }
        #swipe-prompt-container, #swipe-item-container {
            flex: 1; overflow-y: auto; padding: 20px 25px 40px 25px;
            height: 100%;
        }
        #swipe-prompt-container { border-right: 1px solid #eee; }
        #swipe-prompt-container h4, #swipe-item-container h4 {
            margin: 0 0 15px 0; font-size: 16px; color: #333;
        }
        #swipe-item-container img {
             max-width: 100%; height: auto; display: block; border-radius: 4px; margin: 0 auto;
        }
        #swipe-card-footer {
            flex-shrink: 0; padding: 15px 25px; background: #ffffff;
            border-top: 1px solid #e5e5e5; display: flex; gap: 10px;
            justify-content: center; align-items: center;
            box-shadow: 0 -4px 10px -5px rgba(0,0,0,0.1); position: relative;
        }
        #swipe-card-footer button {
            padding: 10px 20px; font-size: 14px; font-weight: bold;
            border-radius: 5px; cursor: pointer; border: 1px solid #ccc;
        }
        #swipe-card-footer button.nav-btn { background: #f0f0f0; }
        #swipe-card-footer button:disabled { opacity: 0.5; cursor: not-allowed; }
        #decision-buttons-container { display: flex; gap: 10px; }
        #swipe-progress {
            position: absolute; left: 25px; top: 50%; transform: translateY(-50%);
            font-weight: bold; font-size: 14px; color: #555;
        }
        .highlighted-word { padding: 2px 4px; border-radius: 4px; }
    `;
    document.head.appendChild(style);

    const controlsContainer = document.createElement('div');
    controlsContainer.id = 'unified-ir-controls';
    controlsContainer.innerHTML = `
        <h4>Enhanced Controls</h4>
        <label>Columns</label>
        <input type="number" id="col-count" value="4" min="1" max="10"/>
        <label>Rows</label>
        <input type="number" id="row-count" value="2" min="1" max="10"/>
        <button id="apply-grid-layout" style="margin-top: 15px;">Apply Grid</button>
        <button id="reset-grid-layout" style="margin-top: 8px;">Reset Grid</button>
        <button id="activate-swipe-mode" style="margin-top: 15px; background: #28a745;">Swipe Mode</button>
    `;
    document.body.appendChild(controlsContainer);

    const overlay = document.createElement('div');
    overlay.id = 'swipe-card-overlay';
    overlay.innerHTML = `
        <div id="swipe-card-main">
            <button class="swipe-close-btn" title="Close (Esc)">X</button>
            <div id="swipe-card-body">
                <div id="swipe-prompt-container"></div>
                <div id="swipe-item-container"></div>
            </div>
            <div id="swipe-card-footer"></div>
        </div>
    `;
    document.body.appendChild(overlay);

    let originalGridStyle = null;
    let swipeState = { items: [], currentIndex: 0 };

    const ui = {
        controls: document.getElementById('unified-ir-controls'),
        colCount: document.getElementById('col-count'),
        rowCount: document.getElementById('row-count'),
        applyBtn: document.getElementById('apply-grid-layout'),
        resetBtn: document.getElementById('reset-grid-layout'),
        swipeBtn: document.getElementById('activate-swipe-mode'),
        overlay: document.getElementById('swipe-card-overlay'),
        promptContainer: document.getElementById('swipe-prompt-container'),
        itemContainer: document.getElementById('swipe-item-container'),
        footer: document.getElementById('swipe-card-footer'),
        closeBtn: overlay.querySelector('.swipe-close-btn')
    };

    function getGridContainer() {
        const item = document.querySelector('.label-map-grid-item');
        if (!item) {
            alert("No grid items found. Please wait for the content to load.");
            return null;
        }
        return item.parentElement;
    }

    function applyCustomGrid() {
        const cols = parseInt(ui.colCount.value);
        const rows = parseInt(ui.rowCount.value);
        const parent = getGridContainer();
        if (!parent) return;

        if (originalGridStyle === null) {
            originalGridStyle = parent.getAttribute('style') || '';
        }

        parent.classList.add('custom-fluid-grid');
        parent.style.setProperty('--col-count', cols);
        parent.style.maxHeight = `${rows * 350}px`;
    }

    function resetGridLayout() {
        const parent = getGridContainer();
        if (!parent) return;
        parent.classList.remove('custom-fluid-grid');
        if (originalGridStyle !== null) {
            parent.setAttribute('style', originalGridStyle);
        } else {
            parent.removeAttribute('style');
        }
        originalGridStyle = null;
    }

    function openSwipeMode() {
        swipeState.items = Array.from(document.querySelectorAll('.label-map-grid-item'));
        if (swipeState.items.length === 0) {
            alert("No grid items to swipe through.");
            return;
        }
        swipeState.currentIndex = 0;
        ui.controls.style.display = 'none';
        ui.overlay.style.display = 'flex';
        renderCurrentCard();
    }

    function closeSwipeMode() {
        ui.overlay.style.display = 'none';
        ui.controls.style.display = 'block';
    }

    function highlightPromptWords(elementToSearch) {
        const prompt = document.querySelector('.prompt-item');
        const promptText = prompt?.innerText?.toLowerCase() || '';
        if (!promptText || !elementToSearch) return;

        const promptWords = [...new Set(promptText.match(/\b\w{4,}\b/g) || [])];
        const colors = ['#ffeaa7', '#fab1a0', '#81ecec', '#a29bfe', '#55efc4', '#fdcb6e'];
        let colorIndex = 0;
        const highlightMap = {};
        promptWords.forEach(word => {
            if (!highlightMap[word]) {
                highlightMap[word] = colors[colorIndex++ % colors.length];
            }
        });

        const walker = document.createTreeWalker(elementToSearch, NodeFilter.SHOW_TEXT);
        let node;
        const nodesToReplace = [];

        while ((node = walker.nextNode())) {
            let html = node.textContent;
            let changed = false;
            promptWords.forEach(word => {
                const regex = new RegExp(`\\b(${word})\\b`, 'gi');
                if (regex.test(html)) {
                    changed = true;
                    html = html.replace(regex, `<span class="highlighted-word" style="background:${highlightMap[word]}">$1</span>`);
                }
            });
            if (changed) {
                nodesToReplace.push({ oldNode: node, newHTML: html });
            }
        }
        nodesToReplace.forEach(item => {
            const span = document.createElement('span');
            span.innerHTML = item.newHTML;
            item.oldNode.parentNode.replaceChild(span, item.oldNode);
        });
    }

    function renderCurrentCard() {
        const item = swipeState.items[swipeState.currentIndex];
        if (!item) return;

        ui.promptContainer.innerHTML = '<h4>Prompt</h4>';
        ui.itemContainer.innerHTML = '<h4>Grid Item</h4>';
        ui.footer.innerHTML = '';
        ui.promptContainer.scrollTop = 0;
        ui.itemContainer.scrollTop = 0;

        const cardClone = item.cloneNode(true);
        const promptClone = document.querySelector('.prompt-item')?.cloneNode(true);
        [cardClone, promptClone].forEach(clone => {
            clone?.querySelectorAll('script, style, svg, canvas').forEach(el => el.remove());
        });

        if(promptClone) {
            highlightPromptWords(promptClone);
            ui.promptContainer.appendChild(promptClone);
        }

        const buttons = cardClone.querySelectorAll('.label-map-label-button');
        const decisionBtnContainer = document.createElement('div');
        decisionBtnContainer.id = 'decision-buttons-container';
        buttons.forEach(btn => {
            btn.addEventListener('click', () => {
                const originalButton = Array.from(item.querySelectorAll('.label-map-label-button'))
                    .find(b => b.textContent.trim() === btn.textContent.trim());
                if (originalButton) originalButton.click();
                if (swipeState.currentIndex + 1 < swipeState.items.length) {
                    swipeState.currentIndex++;
                    renderCurrentCard();
                } else {
                    closeSwipeMode();
                }
            });
            decisionBtnContainer.appendChild(btn);
        });

        const buttonParentInClone = cardClone.querySelector('.label-map-label-buttons-container');
        if (buttonParentInClone) buttonParentInClone.remove();

        highlightPromptWords(cardClone);
        ui.itemContainer.appendChild(cardClone);

        const progressText = document.createElement('div');
        progressText.id = 'swipe-progress';
        progressText.innerText = `${swipeState.currentIndex + 1} of ${swipeState.items.length}`;

        const prevBtn = document.createElement('button');
        prevBtn.textContent = '← Prev';
        prevBtn.className = 'nav-btn';
        prevBtn.disabled = swipeState.currentIndex === 0;
        prevBtn.onclick = () => {
            if (swipeState.currentIndex > 0) {
                swipeState.currentIndex--;
                renderCurrentCard();
            }
        };

        const nextBtn = document.createElement('button');
        nextBtn.textContent = 'Next →';
        nextBtn.className = 'nav-btn';
        nextBtn.disabled = swipeState.currentIndex >= swipeState.items.length - 1;
        nextBtn.onclick = () => {
            if (swipeState.currentIndex < swipeState.items.length - 1) {
                swipeState.currentIndex++;
                renderCurrentCard();
            }
        };

        ui.footer.appendChild(progressText);
        ui.footer.appendChild(prevBtn);
        ui.footer.appendChild(decisionBtnContainer);
        ui.footer.appendChild(nextBtn);
    }

    ui.applyBtn.addEventListener('click', applyCustomGrid);
    ui.resetBtn.addEventListener('click', resetGridLayout);
    ui.swipeBtn.addEventListener('click', openSwipeMode);
    ui.closeBtn.addEventListener('click', closeSwipeMode);

    window.addEventListener('keydown', e => {
        if (ui.overlay.style.display !== 'flex') return;
        if (e.key === 'Escape') closeSwipeMode();
        if (e.key === 'ArrowLeft') ui.footer.querySelector('.nav-btn:first-of-type')?.click();
        if (e.key === 'ArrowRight') ui.footer.querySelector('.nav-btn:last-of-type')?.click();
    });

})();
