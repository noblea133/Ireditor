
// ==UserScript==
// @name         GCO Unified C2P Utilities (Optimized & Fixed - V2)
// @namespace    GCO_UNIFIED_C2P
// @version      3.3
// @description  Combines Parent ID matching, "Yes to Unselected" button, and Advanced Triage with a single, unified, draggable UI and improved performance for IR Editor C2P pages.
// @match        *://ir-editor.amazon.com/questionHub*
// @match        https://ir-editor.amazon.com/*
// @require      https://code.jquery.com/jquery-3.6.0.min.js
// @grant        GM_addStyle
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function () {
    'use strict';

    // --- Constants ---
    const MATCH_COLOR = '#fff8b3';
    const DECISION_COLOR_MAPPING = {
        'Match': 'triage-match',
        'Yes': 'triage-match',
        'No Match': 'triage-no-match',
        'No': 'triage-no-match',
        'Flag': 'triage-flag',
        'Uncertain': 'triage-flag'
    };

    // --- State Variables ---
    let currentFilter = 'all';
    let counts = { match: 0, nomatch: 0, all: 0 };
    let gridContainer = null;
    let lastMove = { item: null, nextSibling: null, appliedClasses: [], originalHeight: '' };
    let isTriageActive = GM_getValue('isTriageActive', true); // Load saved state

    // --- Unified Styles ---
    GM_addStyle(`
        /* Unified Controls Container */
        #gco_unified_controls {
            position: fixed;
            top: 20px;
            left: 20px;
            background: #fff;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            z-index: 9999;
            user-select: none;
            cursor: grab;
            display: flex;
            flex-direction: column;
            gap: 12px;
            font-family: Arial, sans-serif;
        }
        #gco_unified_controls:active {
            cursor: grabbing;
        }

        /* Section Headings */
        #gco_unified_controls h3 {
            margin: 0;
            padding-bottom: 5px;
            color: #333;
            border-bottom: 1px solid #eee;
            width: 100%;
            text-align: center;
            font-size: 16px;
        }

        /* Horizontal Rule Separator */
        .gco-section-separator {
            width: 100%;
            border: none;
            border-top: 1px dashed #ddd;
            margin: 8px 0;
        }

        /* Filter Section Styles */
        #gco_filter_section {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            gap: 8px;
        }
        #gco_filter_section button {
            padding: 8px 12px;
            font-size: 14px;
            cursor: pointer;
            border-radius: 5px;
            border: 1px solid #ccc;
            background: #f0f0f0;
            transition: background-color 0.2s, color 0.2s, border-color 0.2s;
            flex-grow: 1;
            min-width: 80px;
        }
        #gco_filter_section button.active {
            background-color: #4CAF50;
            color: white;
            border-color: #4CAF50;
        }
        .gco-counts {
            font-size: 12px;
            text-align: center;
            color: #555;
            width: 100%;
        }
        .gco-hidden {
            display: none !important;
        }

        /* Yes to Unselected Button Styles */
        #gco-yts-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 18px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            box-sizing: border-box;
            transition: background-color 0.2s;
        }
        #gco-yts-btn:hover {
            background-color: #218838;
        }

        /* Triage Controls Styles */
        #triage-controls-section {
            display: flex;
            justify-content: center;
            gap: 10px;
            width: 100%;
        }
        #triage-controls-section button {
            padding: 8px 15px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s, color 0.2s, border-color 0.2s;
            flex-grow: 1;
        }
        #triage-controls-section button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        #undo-triage-btn {
            background: #6c757d;
            color: white;
        }
        #undo-triage-btn:hover:not(:disabled) {
            background: #5a6268;
        }
        #toggle-triage-btn.active {
            background: #007bff;
            color: white;
        }
        #toggle-triage-btn.active:hover {
            background: #0056b3;
        }
        #toggle-triage-btn.paused {
            background: #ffc107;
            color: #333;
        }
        #toggle-triage-btn.paused:hover {
            background: #e0a800;
        }

        /* Triage Card Styling */
        .triage-processed {
            transition: opacity 0.3s ease-in-out;
        }
        .triage-match { border-left: 5px solid #28a745; }
        .triage-no-match { border-left: 5px solid #dc3545; }
        .triage-flag { border-left: 5px solid #ffc107; }

        /* Triage Vanishing Animation */
        .triage-vanishing {
            transition: all 0.4s ease-in-out;
            opacity: 0;
            height: 0 !important;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
            margin-top: 0 !important;
            margin-bottom: 0 !important;
            overflow: hidden;
            border-width: 0 !important;
        }

        /* Triage Separator */
        #triage-separator {
            width: 100%;
            text-align: center;
            font-weight: bold;
            color: #888;
            padding: 15px 0;
            margin: 10px 0;
            border-top: 2px dashed #ccc;
            border-bottom: 2px dashed #ccc;
            order: 9998;
        }
    `);

    // --- Unified Draggable Function ---
    function makeDraggable(el) {
        let isDragging = false, offsetX, offsetY;

        el.addEventListener('mousedown', function (e) {
            isDragging = true;
            offsetX = e.clientX - el.offsetLeft;
            offsetY = e.clientY - el.offsetTop;
            e.preventDefault(); // Prevent default drag behavior (e.g., text selection)
        });

        document.addEventListener('mousemove', function (e) {
            if (!isDragging) return;
            el.style.left = (e.clientX - offsetX) + 'px';
            el.style.top = (e.clientY - offsetY) + 'px';
        });

        document.addEventListener('mouseup', function () {
            isDragging = false;
        });
    }

    // --- GCO_C2P_MATCHING_VAL_SCRIPT_FilterFix Functions ---
    function getVpiID() {
        // Optimized XPath to be more robust, targeting an ID if possible or a more generic path.
        // Reverted to the original more specific XPath as a starting point if no ID is available
        // to avoid introducing new issues.
        const node = document.evaluate(
            "/html/body/div/div/awsui-app-layout/div/main/div/div[2]/div/span/div/div[2]/div/div[1]/div[2]/div",
            document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null
        ).singleNodeValue;
        if (!node) return null;
        for (const p of node.querySelectorAll("p")) {
            const m = p.textContent.match(/(?:example_asin_parent_id|parent_id):\s*(\S+)/i);
            if (m) return m[1];
        }
        return null;
    }

    function getVEAItems() {
        return Array.from(document.querySelectorAll('.label-map-grid-item')).map(card => {
            let pid = null, target = null;
            card.querySelectorAll('p').forEach(p => {
                const m = p.textContent.match(/(?:example_asin_parent_id|parent_id):\s*(\S+)/i);
                if (m) {
                    pid = m[1];
                    target = p;
                }
            });
            return { card, pid, target };
        });
    }

    function applyFilter() {
        const vpiID = getVpiID();
        const filterSection = $('#gco_filter_section');

        if (!vpiID) {
            counts = { match: 0, nomatch: 0, all: 0 };
            $('#gco_count_match').text(`‚úîÔ∏è ${counts.match}`);
            $('#gco_count_nomatch').text(`‚ùå ${counts.nomatch}`);
            $('#gco_count_all').text(`üîÅ ${counts.all}`);
            filterSection.hide();
            return;
        } else {
            filterSection.show();
        }

        const items = getVEAItems();
        counts = { match: 0, nomatch: 0, all: items.length };
        items.forEach(({ card, pid, target }) => {
            card.classList.remove('gco-hidden');
            if (target) target.style.backgroundColor = '';
            const isMatch = pid === vpiID;

            if (isMatch) {
                counts.match++;
                if (target) target.style.backgroundColor = MATCH_COLOR;
            } else {
                counts.nomatch++;
            }

            if (currentFilter === 'match' && !isMatch) card.classList.add('gco-hidden');
            if (currentFilter === 'nomatch' && isMatch) card.classList.add('gco-hidden');
        });

        $('#gco_count_match').text(`‚úîÔ∏è ${counts.match}`);
        $('#gco_count_nomatch').text(`‚ùå ${counts.nomatch}`);
        $('#gco_count_all').text(`üîÅ ${counts.all}`);
    }

    // --- Advanced Dynamic Triage Functions ---
    const triageSeparator = document.createElement('div');
    triageSeparator.id = 'triage-separator';
    triageSeparator.textContent = '--- Processed ---';

    function updateToggleUI() {
        const toggleBtn = document.getElementById('toggle-triage-btn');
        if (toggleBtn) {
            if (isTriageActive) {
                toggleBtn.textContent = 'Pause';
                toggleBtn.classList.add('active');
                toggleBtn.classList.remove('paused');
            } else {
                toggleBtn.textContent = 'Resume';
                toggleBtn.classList.add('paused');
                toggleBtn.classList.remove('active');
            }
        }
    }

    function updateSeparator() {
        if (!gridContainer) return;
        const firstProcessed = gridContainer.querySelector('.triage-processed');
        if (firstProcessed) {
            if (!triageSeparator.parentElement || triageSeparator.nextSibling !== firstProcessed) {
                gridContainer.insertBefore(triageSeparator, firstProcessed);
            }
        } else if (triageSeparator.parentElement) {
            triageSeparator.parentElement.removeChild(triageSeparator);
        }
    }

    function handleGridClick(event) {
        if (!isTriageActive) return;
        const button = event.target.closest('.label-map-label-button');
        if (!button) return;

        const itemToMove = event.target.closest('.label-map-grid-item');
        if (!itemToMove || itemToMove.classList.contains('triage-vanishing')) return;

        lastMove.item = itemToMove;
        lastMove.nextSibling = itemToMove.nextSibling;
        lastMove.originalHeight = itemToMove.style.height;
        lastMove.appliedClasses = Array.from(itemToMove.classList);
        document.getElementById('undo-triage-btn').disabled = false;

        const itemHeight = itemToMove.getBoundingClientRect().height;
        itemToMove.style.height = `${itemHeight}px`;

        const afterVanish = () => {
            itemToMove.removeEventListener('transitionend', afterVanish);
            const buttonText = button.textContent.trim();
            const colorClass = DECISION_COLOR_MAPPING[buttonText] || '';
            if (colorClass) itemToMove.classList.add(colorClass);
            itemToMove.classList.add('triage-processed');

            gridContainer.appendChild(itemToMove);
            updateSeparator();

            itemToMove.classList.remove('triage-vanishing');
            itemToMove.style.height = lastMove.originalHeight;
        };

        // Use a small timeout to allow height to be set before transition starts
        setTimeout(() => {
            itemToMove.addEventListener('transitionend', afterVanish, { once: true });
            itemToMove.classList.add('triage-vanishing');
        }, 10);
    }

    function undoLastMove() {
        if (!lastMove.item) return;
        const { item, nextSibling, appliedClasses, originalHeight } = lastMove;

        gridContainer.insertBefore(item, nextSibling);

        // Filter out triage-related classes before re-applying original classes
        const classesToReapply = appliedClasses.filter(cls => !cls.startsWith('triage-'));
        item.className = classesToReapply.join(' ');
        item.style.height = originalHeight;

        lastMove = { item: null, nextSibling: null, appliedClasses: [], originalHeight: '' };
        document.getElementById('undo-triage-btn').disabled = true;
        updateSeparator();
    }

    function toggleTriage() {
        isTriageActive = !isTriageActive;
        GM_setValue('isTriageActive', isTriageActive);
        updateToggleUI();
    }

    function initializeTriage() {
        const newGridContainer = document.querySelector('.label-map-grid-item')?.parentElement;
        if (newGridContainer && newGridContainer !== gridContainer) {
            console.log("Unified C2P Utilities: Initializing Triage on new grid container.");
            if (gridContainer) {
                gridContainer.removeEventListener('click', handleGridClick);
            }
            gridContainer = newGridContainer;
            gridContainer.addEventListener('click', handleGridClick);
            updateSeparator();
        }
    }

    // --- Yes to Unselected Button Logic ---
    function handleYesToUnselectedClick() {
        $("div.label-map-grid-item").each(function () {
            const $item = $(this);
            const $yes = $item.find("div.label-map-label-button:contains('Yes')");
            const $no = $item.find("div.label-map-label-button:contains('No')");
            if ($item.is(":visible") && !$yes.hasClass("selected") && !$no.hasClass("selected")) {
                $yes.click();
            }
        });
    }

    // --- Unified UI Creation & Initialization ---
    function makeUnifiedUI() {
        if ($('#gco_unified_controls').length) return; // Only create once

        $('body').append(`
            <div id="gco_unified_controls">
                <h3>Filter Options</h3>
                <div id="gco_filter_section">
                    <button data-type="match">‚úîÔ∏è Match</button><div id="gco_count_match" class="gco-counts"></div>
                    <button data-type="nomatch">‚ùå No Match</button><div id="gco_count_nomatch" class="gco-counts"></div>
                    <button data-type="all">üîÅ All</button><div id="gco_count_all" class="gco-counts"></div>
                </div>

                <hr class="gco-section-separator">

                <h3>Actions</h3>
                <button id="gco-yts-btn" title="Shift + G to activate">Yes to Unselected</button>

                <hr class="gco-section-separator">

                <h3>Triage Controls</h3>
                <div id="triage-controls-section">
                    <button id="undo-triage-btn" disabled>Undo</button>
                    <button id="toggle-triage-btn">Toggle Triage</button>
                </div>
            </div>
        `);

        // Apply draggable to the main unified container
        makeDraggable(document.getElementById('gco_unified_controls'));

        // Filter button event listeners
        $('#gco_filter_section button').on('click', function () {
            currentFilter = $(this).data('type');
            $('#gco_filter_section button').removeClass('active');
            $(this).addClass('active');
            applyFilter();
        });

        // Yes to Unselected button event listener
        $("#gco-yts-btn").on("click", handleYesToUnselectedClick);

        // Triage button event listeners
        document.getElementById('undo-triage-btn').addEventListener('click', undoLastMove);
        document.getElementById('toggle-triage-btn').addEventListener('click', toggleTriage);
        updateToggleUI(); // Initialize toggle button state
    }

    // --- Main Execution Orchestration ---

    // A simpler and robust MutationObserver setup.
    // It watches for any significant DOM change within the document body,
    // and when changes occur, it triggers the main initialization functions
    // after a short delay to ensure elements are rendered.
    const primaryObserver = new MutationObserver((mutationsList, observer) => {
        // Debounce the observer calls to avoid performance issues from too frequent updates
        clearTimeout(window._gcoUnifiedTimeout);
        window._gcoUnifiedTimeout = setTimeout(() => {
            makeUnifiedUI();
            applyFilter();
            initializeTriage();
        }, 100); // A small delay to allow DOM to settle after changes
    });

    // Start observing the body for child list and subtree changes
    primaryObserver.observe(document.body, { childList: true, subtree: true });

    // Initial load setup for when page content is already present or loads quickly
    window.addEventListener('load', () => {
        makeUnifiedUI();
        applyFilter();
        initializeTriage();
    });

    // Yes to Unselected keyboard shortcut
    $(window).on("keydown", function (e) {
        if (e.shiftKey && e.key.toLowerCase() === "g") {
            e.preventDefault(); // Prevent default browser behavior if any
            $("#gco-yts-btn").click();
        }
    });

})();
