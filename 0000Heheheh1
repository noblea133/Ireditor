
// ==UserScript==
// @name         Advanced Dynamic Triage for IR Editor v3
// @namespace    amazon_ir_editor_advanced_triage
// @version      3.0
// @description  Adds Undo, visual separator, decision history, keyboard shortcuts, stats panel, and color-coding to the IR Editor triage workflow.
// @match        https://ir-editor.amazon.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function () {
    'use strict';

    const decisionColorMapping = {
        'Match': 'triage-match',
        'Yes': 'triage-match',
        'No Match': 'triage-no-match',
        'No': 'triage-no-match',
        'Flag': 'triage-flag',
        'Uncertain': 'triage-flag'
    };

    const style = document.createElement('style');
    style.textContent = `
        .triage-processed {
            transition: opacity 0.3s ease-in-out;
        }
        .triage-match { border-left: 5px solid #28a745; }
        .triage-no-match { border-left: 5px solid #dc3545; }
        .triage-flag { border-left: 5px solid #ffc107; }

        .triage-vanishing {
            transition: all 0.4s ease-in-out;
            opacity: 0;
            height: 0 !important;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
            margin-top: 0 !important;
            margin-bottom: 0 !important;
            overflow: hidden;
            border-width: 0 !important;
        }

        #triage-controls {
            position: fixed; bottom: 20px; right: 20px; z-index: 9999;
            display: flex; flex-direction: column; gap: 10px;
            background: #fff; padding: 12px;
            border-radius: 10px; box-shadow: 0 4px 14px rgba(0,0,0,0.2);
            font-family: Arial, sans-serif; font-size: 13px;
        }
        #triage-controls button {
            padding: 6px 12px; font-size: 13px;
            border: 1px solid #ccc; border-radius: 5px; cursor: pointer;
        }
        #triage-controls button:disabled {
            opacity: 0.5; cursor: not-allowed;
        }
        #undo-triage-btn { background: #6c757d; color: white; }
        #toggle-triage-btn.active { background: #007bff; color: white; }
        #toggle-triage-btn.paused { background: #ffc107; }

        #triage-separator {
            width: 100%; text-align: center; font-weight: bold;
            color: #888; padding: 15px 0; margin: 10px 0;
            border-top: 2px dashed #ccc; border-bottom: 2px dashed #ccc;
            order: 9998;
        }

        #triage-history {
            margin-top: 10px;
        }
        #triage-history div {
            font-size: 12px; color: #333;
        }

        #triage-stats {
            display: flex; gap: 8px; font-size: 12px; color: #555;
            margin-top: 8px;
        }
        #triage-stats span { font-weight: bold; }
    `;
    document.head.appendChild(style);

    const controlsDiv = document.createElement('div');
    controlsDiv.id = 'triage-controls';
    controlsDiv.innerHTML = `
        <button id="undo-triage-btn" disabled>Undo (Z)</button>
        <button id="toggle-triage-btn">Toggle Triage</button>
        <div id="triage-stats">
            <div>✅ Match: <span id="count-match">0</span></div>
            <div>❌ No Match: <span id="count-nomatch">0</span></div>
            <div>⚠️ Flag: <span id="count-flag">0</span></div>
        </div>
        <div id="triage-history"><strong>Recent:</strong><br></div>
    `;
    document.body.appendChild(controlsDiv);

    const separator = document.createElement('div');
    separator.id = 'triage-separator';
    separator.textContent = '--- Processed ---';

    let gridContainer = null;
    let lastMove = { item: null, nextSibling: null, appliedClasses: [], originalHeight: '' };
    let isTriageActive = GM_getValue('isTriageActive', true);
    const historyLimit = 5;
    let history = [];

    const undoBtn = document.getElementById('undo-triage-btn');
    const toggleBtn = document.getElementById('toggle-triage-btn');

    const statEls = {
        'Match': document.getElementById('count-match'),
        'No Match': document.getElementById('count-nomatch'),
        'Flag': document.getElementById('count-flag')
    };

    function updateToggleUI() {
        toggleBtn.textContent = isTriageActive ? 'Pause' : 'Resume';
        toggleBtn.classList.toggle('active', isTriageActive);
        toggleBtn.classList.toggle('paused', !isTriageActive);
    }

    function updateSeparator() {
        if (!gridContainer) return;
        const firstProcessed = gridContainer.querySelector('.triage-processed');
        if (firstProcessed) {
            if (!separator.parentElement || separator.nextSibling !== firstProcessed) {
                gridContainer.insertBefore(separator, firstProcessed);
            }
        } else if (separator.parentElement) {
            separator.parentElement.removeChild(separator);
        }
    }

    function addToHistory(buttonText) {
        const time = new Date().toLocaleTimeString();
        const entry = `${time} → ${buttonText}`;
        history.unshift(entry);
        if (history.length > historyLimit) history.pop();

        const container = document.getElementById('triage-history');
        container.innerHTML = '<strong>Recent:</strong><br>' + history.map(e => `<div>${e}</div>`).join('');
    }

    const stats = { 'Match': 0, 'No Match': 0, 'Flag': 0 };
    function updateStats(buttonText) {
        if (buttonText in stats) {
            stats[buttonText]++;
            statEls[buttonText].textContent = stats[buttonText];
        } else if (buttonText === 'Yes') {
            stats['Match']++;
            statEls['Match'].textContent = stats['Match'];
        } else if (buttonText === 'No') {
            stats['No Match']++;
            statEls['No Match'].textContent = stats['No Match'];
        } else if (buttonText === 'Uncertain') {
            stats['Flag']++;
            statEls['Flag'].textContent = stats['Flag'];
        }
    }

    function handleGridClick(event, forcedDecision = null) {
        if (!isTriageActive) return;

        const button = forcedDecision ? event : event.target.closest('.label-map-label-button');
        if (!button) return;

        const itemToMove = forcedDecision
            ? document.activeElement.closest('.label-map-grid-item')
            : button.closest('.label-map-grid-item');

        if (!itemToMove || itemToMove.classList.contains('triage-vanishing')) return;

        lastMove.item = itemToMove;
        lastMove.nextSibling = itemToMove.nextSibling;
        lastMove.originalHeight = itemToMove.style.height;
        lastMove.appliedClasses = Array.from(itemToMove.classList);
        undoBtn.disabled = false;

        const itemHeight = itemToMove.getBoundingClientRect().height;
        itemToMove.style.height = `${itemHeight}px`;

        const buttonText = forcedDecision || button.textContent.trim();
        const colorClass = decisionColorMapping[buttonText] || '';

        const afterVanish = () => {
            itemToMove.removeEventListener('transitionend', afterVanish);
            if (colorClass) itemToMove.classList.add(colorClass);
            itemToMove.classList.add('triage-processed');
            gridContainer.appendChild(itemToMove);
            updateSeparator();
            itemToMove.classList.remove('triage-vanishing');
            itemToMove.style.height = lastMove.originalHeight;

            addToHistory(buttonText);
            updateStats(buttonText);
        };

        setTimeout(() => {
            itemToMove.addEventListener('transitionend', afterVanish, { once: true });
            itemToMove.classList.add('triage-vanishing');
        }, 10);
    }

    function undoLastMove() {
        if (!lastMove.item) return;

        const { item, nextSibling, appliedClasses, originalHeight } = lastMove;
        gridContainer.insertBefore(item, nextSibling);
        item.className = appliedClasses.join(' ');
        item.style.height = originalHeight;

        lastMove = { item: null, nextSibling: null, appliedClasses: [], originalHeight: '' };
        undoBtn.disabled = true;
        updateSeparator();
    }

    function toggleTriage() {
        isTriageActive = !isTriageActive;
        GM_setValue('isTriageActive', isTriageActive);
        updateToggleUI();
    }

    function initializeTriage() {
        const newGridContainer = document.querySelector('.label-map-grid-item')?.parentElement;
        if (newGridContainer && newGridContainer !== gridContainer) {
            if (gridContainer) {
                gridContainer.removeEventListener('click', handleGridClick);
            }
            gridContainer = newGridContainer;
            gridContainer.addEventListener('click', handleGridClick);
            updateSeparator();
        }
    }

    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0) {
                initializeTriage();
                return;
            }
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });

    undoBtn.addEventListener('click', undoLastMove);
    toggleBtn.addEventListener('click', toggleTriage);
    updateToggleUI();
    setTimeout(initializeTriage, 500);

    document.addEventListener('keydown', (e) => {
        if (!isTriageActive) return;
        const key = e.key.toLowerCase();
        if (key === 'z') undoLastMove();
        if (['y', 'n', 'f'].includes(key)) {
            const active = document.activeElement;
            const item = active?.closest('.label-map-grid-item');
            if (!item) return;
            const labelButtons = item.querySelectorAll('.label-map-label-button');
            const keyToLabel = { 'y': 'Yes', 'n': 'No', 'f': 'Flag' };
            for (let btn of labelButtons) {
                if (btn.textContent.trim().toLowerCase() === keyToLabel[key].toLowerCase()) {
                    handleGridClick(btn, keyToLabel[key]);
                    break;
                }
            }
        }
    });
})();
