
// ==UserScript==
// @name         Question Hub Button State Restorer
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Restores visual state of clicked buttons on page reload.
// @author       Gemini
// @match        *://*/* // IMPORTANT: Change this to the specific URL of your "Question Hub" page!
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // Keys for storing data in Tampermonkey's GM_setValue/GM_getValue (which uses localStorage)
    const SCRIPT_ENABLED_KEY = 'qh_button_restore_enabled';
    const CLICKED_BUTTONS_KEY = 'qh_clicked_buttons_ids'; // Stores IDs of elements that were "clicked"

    // Get initial script enabled state (default to true if not set)
    let scriptEnabled = GM_getValue(SCRIPT_ENABLED_KEY, true);

    // --- UI for Toggle Switch ---
    function createToggleUI() {
        const toggleContainer = document.createElement('div');
        toggleContainer.id = 'tampermonkey-toggle-container';
        // Apply inline styles for a fixed, unobtrusive toggle
        Object.assign(toggleContainer.style, {
            position: 'fixed',
            bottom: '10px',
            left: '10px',
            background: '#333',
            color: 'white',
            padding: '8px 12px',
            borderRadius: '5px',
            zIndex: '99999',
            fontSize: '13px',
            fontFamily: 'sans-serif',
            boxShadow: '0 2px 5px rgba(0,0,0,0.3)',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
        });

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.id = 'tampermonkey-toggle';
        checkbox.checked = scriptEnabled; // Set initial state of checkbox
        checkbox.style.cursor = 'pointer';

        // Event listener for when the toggle state changes
        checkbox.addEventListener('change', (event) => {
            scriptEnabled = event.target.checked;
            GM_setValue(SCRIPT_ENABLED_KEY, scriptEnabled); // Save the new state

            // Immediately apply or remove styles based on the toggle
            if (!scriptEnabled) {
                clearClickedStates(); // Remove all applied visual states
            } else {
                restoreClickedStates(); // Reapply visual states if enabled
            }
        });

        const label = document.createElement('label');
        label.htmlFor = 'tampermonkey-toggle';
        label.textContent = 'Restore Button States';
        label.style.cursor = 'pointer';

        toggleContainer.appendChild(checkbox);
        toggleContainer.appendChild(label);
        document.body.appendChild(toggleContainer);
    }

    // --- CSS for Clicked State Indication ---
    // This CSS class will be added to elements to visually mark them as "clicked"
    GM_addStyle(`
        .tm-clicked-state {
            /* Example styles - customize as needed */
            background-color: #f0f0f0 !important; /* Lighter background */
            border: 1px solid #ccc !important; /* Solid border */
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.15) !important; /* Inner shadow for pressed look */
            opacity: 0.9; /* Slightly less opaque */
        }
        /* You might want to adjust text color for contrast if background changes significantly */
        .tm-clicked-state span, .tm-clicked-state i, .tm-clicked-state svg {
            color: #555 !important; /* Example for text/icons inside */
        }
    `);

    // --- Core Logic for Saving and Restoring States ---

    /**
     * Saves the ID of a clicked element to local storage.
     * @param {string} elementId The ID of the element to save.
     */
    function saveClickedElementId(elementId) {
        // Retrieve current clicked IDs, parse as Set for easy manipulation
        let clickedIds = new Set(JSON.parse(GM_getValue(CLICKED_BUTTONS_KEY, '[]')));
        clickedIds.add(elementId); // Add the new ID
        // Store the updated Set back as a JSON string
        GM_setValue(CLICKED_BUTTONS_KEY, JSON.stringify(Array.from(clickedIds)));
    }

    /**
     * Removes the ID of an unclicked element from local storage.
     * @param {string} elementId The ID of the element to remove.
     */
    function removeClickedElementId(elementId) {
        let clickedIds = new Set(JSON.parse(GM_getValue(CLICKED_BUTTONS_KEY, '[]')));
        clickedIds.delete(elementId); // Remove the ID
        GM_setValue(CLICKED_BUTTONS_KEY, JSON.stringify(Array.from(clickedIds)));
    }

    /**
     * Applies the visual "clicked" state class to an element.
     * @param {HTMLElement} element The element to apply the state to.
     */
    function applyClickedState(element) {
        if (element && !element.classList.contains('tm-clicked-state')) {
            element.classList.add('tm-clicked-state');
        }
    }

    /**
     * Removes the visual "clicked" state class from an element.
     * @param {HTMLElement} element The element to remove the state from.
     */
    function removeClickedState(element) {
        if (element && element.classList.contains('tm-clicked-state')) {
            element.classList.remove('tm-clicked-state');
        }
    }

    /**
     * Restores the visual states of previously clicked elements on page load.
     */
    function restoreClickedStates() {
        if (!scriptEnabled) {
            return; // Do nothing if the script is disabled
        }

        const clickedIds = new Set(JSON.parse(GM_getValue(CLICKED_BUTTONS_KEY, '[]')));
        clickedIds.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                applyClickedState(element);
                // console.log(`Restored state for element with ID: ${id}`);
            } else {
                // console.warn(`Element with ID "${id}" not found on page. Its state might not be restorable.`);
                // Optionally, you might want to remove outdated IDs from storage here
                // removeClickedElementId(id); // Uncomment if you want to clean up missing elements
            }
        });
    }

    /**
     * Clears all stored clicked states and removes applied classes from visible elements.
     */
    function clearClickedStates() {
        const clickedIds = new Set(JSON.parse(GM_getValue(CLICKED_BUTTONS_KEY, '[]')));
        clickedIds.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                removeClickedState(element);
            }
        });
        GM_setValue(CLICKED_BUTTONS_KEY, '[]'); // Clear all stored IDs
    }

    // --- Global Click Event Listener ---
    // This listens for any click on the page and checks if it's on a relevant element.
    document.addEventListener('click', (event) => {
        if (!scriptEnabled) {
            return; // Do nothing if the script is disabled
        }

        let targetElement = event.target;
        // Traverse up the DOM tree from the clicked element
        // to find a parent that matches our criteria (button-like element with an ID)
        while (targetElement && targetElement !== document.body) {
            // Check if the current element is a button-like element AND has an ID
            // We check for: <button>, <input type="button/submit/reset">, <a> tags (which often act as buttons),
            // elements with role="button", or the specific 'qchat-close-button' div found in your HTML.
            if (
                (targetElement.tagName === 'BUTTON' ||
                 (targetElement.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes(targetElement.type)) ||
                 targetElement.tagName === 'A' ||
                 targetElement.getAttribute('role') === 'button' ||
                 targetElement.classList.contains('qchat-close-button')) &&
                targetElement.id // Ensure the element has an ID for reliable tracking
            ) {
                const elementId = targetElement.id;

                // Toggle the state: if it's currently marked, unmark it and remove from storage; otherwise, mark it and add to storage.
                if (targetElement.classList.contains('tm-clicked-state')) {
                    removeClickedState(targetElement);
                    removeClickedElementId(elementId);
                } else {
                    applyClickedState(targetElement);
                    saveClickedElementId(elementId);
                }
                break; // Stop traversing once a relevant element is found and processed
            }
            targetElement = targetElement.parentNode; // Move up to the parent element
        }
    }, true); // The 'true' argument means the listener uses the capture phase, which can be useful for intercepting clicks earlier.

    // --- Initialization on Page Load ---
    window.addEventListener('load', () => {
        createToggleUI(); // Create the on/off toggle in the UI
        restoreClickedStates(); // Apply saved states when the page finishes loading
    });

})();
