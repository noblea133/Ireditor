// ==UserScript==
// @name ASIN Counter and Decision Tracker
// @namespace combined_asin_tools
// @description Tracks ASIN decisions with logs, restore, CSV export, cross-tab sync, and adds ASIN/Payload count with target tracking.
// @author @abdilolh
// @version 1.0
// @match https://ir-editor.amazon.com/*
// @require https://code.jquery.com/jquery-3.6.0.min.js
// @require https://gist.github.com/raw/2625891/waitForKeyElements.js
// @homepageURL https://sapp.amazon.com/gco_tools/marconi/index.html
// @grant GM_setValue
// @grant GM_getValue
// @grant GM_addStyle
// @grant GM_addValueChangeListener
// ==/UserScript==

(function () {
    'use strict';

    // ASIN Counter Progress BETA variables
    let mode = GM_getValue("mode", "asin"); // "asin" or "payload"
    let daily_target = GM_getValue("daily_target", 500);
    let non_productive_minutes = GM_getValue("non_productive_minutes", 0);
    let notified = false;
    let lastProgress = 0;
    let question_num = 0;
    const working_hours = 8;

    // ASIN Decision Tracker variables
    let decisionCount = 0;
    let decisionMap = {};
    let dayLogs = [];
    let channelDecisionMap = {};
    const currentChannelId = window.location.href.slice(-8);

    // Common functions for both scripts
    async function loadData() {
        // Load data for ASIN Decision Tracker
        decisionCount = parseInt(await GM_getValue('asinDecisionCount', 0));
        decisionMap = JSON.parse(await GM_getValue('asinDecisionMap', '{}'));
        dayLogs = JSON.parse(await GM_getValue('asinDayLogs', '[]'));
        channelDecisionMap = JSON.parse(await GM_getValue('asinChannelMap', '{}'));

        // Load data for ASIN Counter Progress
        mode = GM_getValue("mode", "asin");
        daily_target = GM_getValue("daily_target", 500);
        non_productive_minutes = GM_getValue("non_productive_minutes", 0);

        updateCombinedUI();
    }

    async function saveData() {
        // Save data for ASIN Decision Tracker
        await GM_setValue('asinDecisionCount', decisionCount);
        await GM_setValue('asinDecisionMap', JSON.stringify(decisionMap));
        await GM_setValue('asinDayLogs', JSON.stringify(dayLogs));
        await GM_setValue('asinChannelMap', JSON.stringify(channelDecisionMap));

        // Save data for ASIN Counter Progress
        GM_setValue("daily_target", daily_target);
        GM_setValue("non_productive_minutes", non_productive_minutes);
        GM_setValue("mode", mode);
    }

    // ASIN Counter Progress BETA functions
    function resetIfNeeded() {
        const today = new Date().toDateString();
        const storedDate = GM_getValue("counter_date", "");
        if (storedDate !== today) {
            GM_setValue("counter_value", 0);
            GM_setValue("counter_date", today);
        }
    }

    function getAdjustedTarget() {
        const totalMinutes = working_hours * 60;
        const effectiveMinutes = totalMinutes - non_productive_minutes;
        const ratio = Math.max(0, effectiveMinutes / totalMinutes);
        return Math.round(ratio * daily_target);
    }

    function getCounter(updateVal = 0) {
        resetIfNeeded();
        let counter = GM_getValue("counter_value", 0) + updateVal;
        GM_setValue("counter_value", counter);
        return counter;
    }

    function calculateProgress(current) {
        return Math.min(parseFloat(((current / getAdjustedTarget()) * 100).toFixed(2)), 100);
    }

    function openSettingsDialog() {
        $('.custom-dialog-overlay').remove();
        const dialog = $(`
            <div class="custom-dialog-overlay" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.4); display: flex; justify-content: center; align-items: center; z-index: 9999;">
                <div style="background: rgba(255,255,255,0.95); padding: 24px; border-radius: 12px; width: 320px; font-family: 'Segoe UI', sans-serif; box-shadow: 0 4px 12px rgba(0,0,0,0.2);">
                    <h3 style="margin: 0 0 16px; font-size: 18px; color: #222;">Tracker Settings</h3>

                    <label>Mode:</label>
                    <select id="mode-select" style="width: 100%; padding: 10px; margin-bottom: 16px; border: 1px solid #ccc; border-radius: 6px; font-size: 14px;">
                        <option value="asin" ${mode === 'asin' ? 'selected' : ''}>ASIN Counter</option>
                        <option value="payload" ${mode === 'payload' ? 'selected' : ''}>Payload (Question) Counter</option>
                    </select>

                    <label>Daily Target:</label>
                    <input type="number" id="target-input" value="${daily_target}" style="width: 100%;
padding: 10px; margin-bottom: 16px; border: 1px solid #ccc; border-radius: 6px;
font-size: 14px;">

                    <label>Non-Productive Time (minutes):</label>
                    <input type="number" id="nph-input" value="${non_productive_minutes}" min="0" max="480" style="width: 100%;
padding: 10px; margin-bottom: 24px; border: 1px solid #ccc; border-radius: 6px;
font-size: 14px;">

                    <div style="display: flex;
justify-content: space-between; gap: 10px;">
                        <button class="cancel-btn" style="flex: 1;
padding: 10px; background: #e0e0e0; border: none; border-radius: 6px; font-size: 14px;
cursor: pointer;">Cancel</button>
                        <button class="save-btn" style="flex: 1;
padding: 10px; background: #4CAF50; color: white; border: none; border-radius: 6px; font-size: 14px;
cursor: pointer;">Save</button>
                    </div>
                </div>
            </div>
        `);

        dialog.find(".cancel-btn").click(() => dialog.remove());
        dialog.find(".save-btn").click(() => {
            const newTarget = parseInt($('#target-input').val());
            const newNPH = parseInt($('#nph-input').val());
            const newMode = $('#mode-select').val();

            if (newTarget > 0 && newNPH >= 0 && newNPH <= 480) {
                daily_target = newTarget;
                non_productive_minutes = newNPH;
                mode = newMode;

                saveData(); // Save updated settings
                notified = false;
                lastProgress = 0;
                updateCombinedUI();
                dialog.remove();
            } else {
                alert("Please enter valid values.");
            }
        });

        $('body').append(dialog);
    }

    function enableQuestion() {
        const taskTitle = $("div.task-queue-title h5 span").text();
        const match = taskTitle.match(/Question\s+(\d+)/);
        if (match) question_num = match[1];
    }

    function checkForNewQuestion() {
        if (question_num !== 0) {
            const prev = GM_getValue("last_question_num", 0);
            if (question_num == prev) return false;
            GM_setValue("last_question_num", question_num);
            return true;
        }
        return true;
    }

    let lastSubmitTime = 0;
    function handleSubmitClick() {
        const now = Date.now();
        if (now - lastSubmitTime < 1000) return;
        lastSubmitTime = now;
        if (!checkForNewQuestion()) return;

        const valueToAdd = (mode === "asin") ?
            document.querySelectorAll('.awsui-popover__trigger a').length : // For ASIN counter, count ASINs in popover
            1; // For Payload counter, count as 1 question

        getCounter(valueToAdd); // Update the ASIN/Payload counter
        updateCombinedUI();
    }

    // ASIN Decision Tracker functions
    function getQuestionId() {
        const h5 = document.querySelector('.task-queue-title h5');
        if (!h5) return null;
        const match = h5.textContent.match(/[a-f0-9]{32}/i);
        return match ? match[0] : null;
    }

    function getAsinFromGrid(gridItem) {
        const asinLink = gridItem.querySelector('a');
        return asinLink ? asinLink.textContent.trim() : null;
    }

    async function saveLap() {
        if (dayLogs.length < 5) {
            dayLogs.push(decisionCount);
        } else {
            dayLogs.shift();
            dayLogs.push(decisionCount);
        }
        await saveData();
        updateCombinedUI();
    }

    async function restoreDecisions() {
        const questionId = getQuestionId();
        if (!questionId) return;
        document.querySelectorAll('.label-map-grid-item').forEach(grid => {
            const asin = getAsinFromGrid(grid);
            const key = `${questionId}_${asin}`;
            const decision = decisionMap[key];
            if (decision) {
                const buttons = grid.querySelectorAll('.label-map-label-button');
                buttons.forEach(btn => btn.classList.remove('selected-button'));
                for (const btn of buttons) {
                    if (btn.textContent.trim() === decision.buttonText) {
                        btn.classList.add('selected-button');
                        grid.style.backgroundColor = 'rgba(0, 128, 0, 0.2)';
                        break;
                    }
                }
            }
        });
    }

    async function clearCount() {
        decisionCount = 0;
        decisionMap = {};
        await saveData();
        document.querySelectorAll('.label-map-grid-item').forEach(g => {
            g.style.backgroundColor = '';
            g.querySelectorAll('.label-map-label-button').forEach(btn => btn.classList.remove('selected-button'));
        });
        updateCombinedUI();
    }

    async function clearLastDay() {
        if (dayLogs.length > 0) {
            dayLogs.pop();
            await saveData();
            updateCombinedUI();
        }
    }

    function downloadCSV() {
        let csvContent = "data:text/csv;charset=utf-8,Day,ASINs Completed\n";
        dayLogs.forEach((count, index) => {
            csvContent += `Day ${index + 1},${count}\n`;
        });
        const total = dayLogs.reduce((sum, val) => sum + val, 0);
        csvContent += `\nTotal,${total}\n`;
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement('a');
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "asin_day_logs.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    function makeDraggable(elm) {
        elm.onmousedown = function (e) {
            let offsetX = e.clientX - elm.offsetLeft;
            let offsetY = e.clientY - elm.offsetTop;
            function mouseMove(e) {
                elm.style.top = `${e.clientY - offsetY}px`;
                elm.style.left = `${e.clientX - offsetX}px`;
                elm.style.right = 'auto';
            }
            function stopDrag() {
                document.removeEventListener('mousemove', mouseMove);
                document.removeEventListener('mouseup', stopDrag);
            }
            document.addEventListener('mousemove', mouseMove);
            document.addEventListener('mouseup', stopDrag);
        };
    }

    async function handleDecisionClick(event) {
        const btn = event.target.closest('.label-map-label-button');
        if (!btn) return;
        const gridItem = btn.closest('.label-map-grid-item');
        const asin = getAsinFromGrid(gridItem);
        const questionId = getQuestionId();
        if (!asin || !questionId) return;
        const key = `${questionId}_${asin}`;
        const isFirstTime = !decisionMap[key];
        gridItem.querySelectorAll('.label-map-label-button').forEach(b => b.classList.remove('selected-button'));
        btn.classList.add('selected-button');
        gridItem.style.backgroundColor = 'rgba(0, 128, 0, 0.2)';
        decisionMap[key] = { buttonText: btn.textContent.trim() };
        if (isFirstTime) {
            decisionCount++;
        }
        await saveData();
        updateCombinedUI();
    }

    // Unified UI Update Function
    function updateCombinedUI() {
        const count = getCounter(0);
        const target = getAdjustedTarget();
        const progress = calculateProgress(count);

        let container = document.getElementById('asin-tracker-combined-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'asin-tracker-combined-container';
            container.innerHTML = `
                <div id="asin-combined-header" style="display: flex; justify-content: space-between; align-items: center;">
                    <strong>ASIN Decisions:</strong> <span id="asin-decision-counter">${decisionCount}</span>
                    <button id="toggle-details">Menu ▼</button>
                </div>

                <div id="asin-counter-details" style="display: none; margin-top: 10px;">
                    <div style="margin-bottom: 6px;"><strong>Channel:</strong> ${currentChannelId}</div>

                    <div class="asin-stats-container" style="margin-top: 15px; padding: 14px; background: rgba(255,255,255,0.75); border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); font-family: 'Segoe UI', sans-serif;">
                        <div style="display: flex; align-items: center; gap: 12px; flex-wrap: wrap;">
                            <h4 class="task-count-display" style="margin: 0; font-size: 18px; font-weight: 600; color: #222;">[ ${count} / ${target} ${mode === 'asin' ? 'ASINs' : 'Payloads'} ]</h4>
                            <span style="font-size: 16px; color: #444;">(${progress}%)</span>
                            <div class="progress-bar" style="flex: 1; min-width: 140px; height: 12px; background: #e0e0e0; border-radius: 8px; overflow: hidden;">
                                <div class="progress-fill" style="width: ${lastProgress}%; height: 100%; background: ${progress >= 100
? '#4CAF50' : '#2196F3'}; transition: width 0.6s ease-in-out;"></div>
                            </div>
                            <button class="settings-btn" style="padding: 6px 12px; background: linear-gradient(to right, #6a11cb, #2575fc); color: white; border: none; border-radius: 6px; font-size: 13px; cursor: pointer;">Settings</button>
                        </div>
                    </div>

                    <button id="lap-button" class="lap-btn">Record</button>
                    <button id="restore-button" class="restore-btn">Restore</button>
                    <button id="clear-count" class="clear-count-btn">Clear Decision Count</button>
                    <button id="clear-last-day" class="clear-days-btn">Clear Last Day Log</button>
                    <button id="download-days" class="download-btn">Download CSV</button>
                    <button id="toggle-days" class="toggle-days-btn">Show/Hide Day Logs</button>
                    <div id="day-logs" style="display: none; margin-top: 10px;"></div>
                </div>`;

            Object.assign(container.style, {
                position: 'fixed',
                top: '20px',
                right: '20px',
                zIndex: '9999',
                fontSize: '14px',
                background: '#1e1e1e',
                color: 'white',
                padding: '10px',
                borderRadius: '10px',
                boxShadow: '0 0 10px rgba(0,0,0,0.4)',
                maxWidth: '280px', // Adjusted for more content
                cursor: 'move'
            });
            document.body.appendChild(container);
            makeDraggable(container);

            document.getElementById('toggle-details').onclick = () => {
                const details = document.getElementById('asin-counter-details');
                details.style.display = details.style.display === 'none' ? 'block' : 'none';
            };
            document.getElementById('lap-button').onclick = saveLap;
            document.getElementById('restore-button').onclick = restoreDecisions;
            document.getElementById('clear-count').onclick = clearCount;
            document.getElementById('clear-last-day').onclick = clearLastDay;
            document.getElementById('toggle-days').onclick = () => {
                const logDiv = document.getElementById('day-logs');
                logDiv.style.display = logDiv.style.display === 'none' ? 'block' : 'none';
            };
            document.getElementById('download-days').onclick = downloadCSV;
            container.querySelector(".settings-btn").onclick = openSettingsDialog;
        }

        // Update ASIN Decision Counter
        document.getElementById('asin-decision-counter').textContent = decisionCount;
        updateDayLogs();

        // Update ASIN/Payload Counter Progress
        const taskCountDisplay = container.querySelector(".task-count-display");
        const progressSpan = container.querySelector(".asin-stats-container span");
        const progressFill = container.querySelector(".progress-fill");

        if (taskCountDisplay) { // Check if these elements exist
            taskCountDisplay.textContent = `[ ${count} / ${target} ${mode === 'asin' ? 'ASINs' : 'Payloads'} ]`;
            progressSpan.textContent = `(${progress}%)`;
            progressFill.style.width = `${progress}%`;
            progressFill.style.background = progress >= 100 ? '#4CAF50' : '#2196F3';

            if (progress >= 100 && !notified) {
                notified = true;
                alert("🎉 Congratulations! You've reached your target!");
            }
        }
        lastProgress = progress;
    }

    function updateDayLogs() {
        const logContainer = document.getElementById('day-logs');
        if (!logContainer) return;
        logContainer.innerHTML = '';
        for (let i = 0; i < 5; i++) {
            const day = document.createElement('div');
            day.textContent = `Day ${i + 1}: ${dayLogs[i] || 0}`;
            logContainer.appendChild(day);
        }
    }

    // Sync across tabs for decision tracker
    GM_addValueChangeListener('asinDecisionMap', (n, o, val) => {
        decisionMap = JSON.parse(val);
    });
    GM_addValueChangeListener('asinDecisionCount', (n, o, val) => {
        decisionCount = parseInt(val);
        updateCombinedUI();
    });

    // Initial setup and event listeners
    GM_addStyle(`
        .selected-button {
            outline: 3px solid #1aff1a !important;
        }
        #asin-tracker-combined-container button {
            border: none;
            border-radius: 5px;
            padding: 6px 10px;
            margin: 3px 2px;
            font-size: 12px;
            cursor: pointer;
            color: white;
        }
        #asin-tracker-combined-container #asin-combined-header button {
            background-color: #7f8c8d;
        }
        #asin-tracker-combined-container .lap-btn { background-color: #3498db; } [cite: 83]
        #asin-tracker-combined-container .restore-btn { background-color: #8e44ad; [cite_start]}
        #asin-tracker-combined-container .clear-count-btn { background-color: #e74c3c; } [cite: 84]
        #asin-tracker-combined-container .clear-days-btn { background-color: #f39c12; [cite_start]}
        #asin-tracker-combined-container .download-btn { background-color: #16a085; } [cite: 84]
        #asin-tracker-combined-container .toggle-days-btn { background-color: #2ecc71; [cite_start]}
        #asin-tracker-combined-container button:hover {
            opacity: 0.85;
        }
        .asin-stats-container {
             /* Styles from script1.txt for visual appeal */
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 10px;
            background-color: #f9f9f9; /* Light background for the progress area */
        }
        .progress-bar {
            height: 10px;
            background-color: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
        }
        .progress-fill {
            height: 100%;
            background-color: #2196F3;
            border-radius: 5px;
            transition: width 0.5s ease-in-out;
        }
    `);

    document.addEventListener('click', handleDecisionClick);

    // Initialize ASIN Counter Progress listeners using waitForKeyElements
    waitForKeyElements("awsui-button.cluster-question-top-bar-submit", (btn) => {
        $(btn).on("click", handleSubmitClick);
    });

    waitForKeyElements("awsui-button.label-map-question-submit", (btn) => {
        $(btn).on("click", handleSubmitClick);
    });

    waitForKeyElements("div.task-queue-title > h5 > span", enableQuestion);
    waitForKeyElements("div.task-queue-right", loadData); // Initialize with loadData once a key element is present
})();

