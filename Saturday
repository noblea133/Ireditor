
Okay, I've incorporated the recommendations into your user script. Here's a breakdown of the key changes I've made, followed by the complete updated code:
Summary of Implemented Changes:
 * Constants for Selectors and Keys:
   * Added GM_KEYS, IDS, and CLASSES constants at the top of the script to manage strings for Greasemonkey storage keys, DOM element IDs, and frequently used CSS classes, respectively. This improves maintainability and reduces the risk of typos.
 * Modularized UI Component Creation:
   * The initial HTML structure for the tracker UI within updateCombinedUI is now generated by three new functions:
     * createHeaderHTML(decisionCount)
     * createProgressSectionHTML(progress)
     * createMenuDetailsHTML(currentChannelId)
   * These functions return HTML strings, making the updateCombinedUI function cleaner during the initial UI setup.
 * Cached UI Element References:
   * A uiElements object is now used to cache references to frequently updated DOM elements (like the decision counter, progress bar elements, menu details) after they are first created.
   * Subsequent calls to updateCombinedUI use these cached references to update content, which is more efficient than re-querying the DOM every time.
 * Accessibility Enhancements (ARIA Attributes):
   * Menu Toggle Button: Added aria-expanded attribute, which is updated when the menu is opened or closed.
   * Progress Bar: The progress-fill div now includes role="progressbar", aria-valuenow, aria-valuemin="0", and aria-valuemax="100" to improve accessibility for screen readers. aria-valuenow is updated dynamically.
 * Improved Dialog Validation Message:
   * In the "Tracker Settings" dialog, the alert() for input validation errors has been replaced with an inline error message displayed directly within the dialog. This provides a less disruptive user experience. (referring to the original use of alert).
 * Refined updateDayLogs Function:
   * The updateDayLogs function now accepts the log container DOM element as an argument, allowing it to use the cached reference from uiElements.
The core logic of tracking ASIN decisions, saving/loading data, and other features remains unchanged. These modifications focus on code organization, maintainability, minor performance optimization for UI updates, and accessibility.
Here is the entire updated code:
// ==UserScript==
// @name ASIN Counter and Decision Tracker
// @namespace combined_asin_tools
// @description Tracks ASIN decisions with logs, restore, CSV export, cross-tab sync, and adds decision count with target tracking.
// Sleek UI.
// @author @abdilolh
// @version 2.0 (Updated with recommendations)
// @match https://ir-editor.amazon.com/*
// @require https://code.jquery.com/jquery-3.6.0.min.js
// @require https://gist.github.com/raw/2625891/waitForKeyElements.js
// @homepageURL https://sapp.amazon.com/gco_tools/marconi/index.html
// @grant GM_setValue
// @grant GM_getValue
// @grant GM_addStyle
// @grant GM_addValueChangeListener
// ==/UserScript==

(function () {
    'use strict';

    // Constants
    const GM_KEYS = {
        DAILY_TARGET: "daily_target",
        NON_PRODUCTIVE_MINUTES: "non_productive_minutes",
        DECISION_COUNT: 'asinDecisionCount',
        DECISION_MAP: 'asinDecisionMap',
        DAY_LOGS: 'asinDayLogs'
    };

    const IDS = {
        MAIN_CONTAINER: 'asin-tracker-combined-container',
        DECISION_COUNTER: 'asin-decision-counter',
        TOGGLE_MENU_BUTTON: 'toggle-details-button', // Changed from 'toggle-details' for clarity
        PROGRESS_SECTION: 'progress-section', // Added for potential direct styling/access
        MENU_DETAILS: 'asin-menu-details',
        DAY_LOGS_CONTAINER: 'day-logs-container', // Changed from 'day-logs'
        SETTINGS_BUTTON: 'settings-button',
        LAP_BUTTON: 'lap-button',
        RESTORE_BUTTON: 'restore-button',
        CLEAR_COUNT_BUTTON: 'clear-count-button', // Changed from 'clear-count'
        CLEAR_LAST_DAY_BUTTON: 'clear-last-day-button', // Changed from 'clear-last-day'
        DOWNLOAD_DAYS_BUTTON: 'download-days-button', // Changed from 'download-days'
        TOGGLE_DAYS_BUTTON: 'toggle-days-button', // Changed from 'toggle-days'
        TARGET_INPUT: 'target-input',
        NPH_INPUT: 'nph-input',
        DIALOG_ERROR_MESSAGE: 'dialog-error-message'
    };

    const CLASSES = {
        PROGRESS_PERCENTAGE: 'progress-percentage',
        PROGRESS_FILL: 'progress-fill',
        DIALOG_OVERLAY: 'custom-dialog-overlay',
        DIALOG_CONTENT: 'dialog-content',
        DIALOG_TITLE: 'dialog-title',
        DIALOG_BUTTONS: 'dialog-buttons',
        CANCEL_BUTTON: 'cancel-btn',
        SAVE_BUTTON: 'save-btn',
        HEADER_BUTTON: 'header-button', //
        ACTION_BUTTON: 'action-button', //
        SETTINGS_CLASS: 'settings', //
        DEFAULT_CLASS: 'default', //
        DANGER_CLASS: 'danger', //
        WARNING_CLASS: 'warning', //
        SUCCESS_CLASS: 'success' //
    };

    // Global state variables
    let daily_target = GM_getValue(GM_KEYS.DAILY_TARGET, 500);
    let non_productive_minutes = GM_getValue(GM_KEYS.NON_PRODUCTIVE_MINUTES, 0);
    let notified = false;
    const working_hours = 8;

    let decisionCount = 0;
    let decisionMap = {};
    let dayLogs = [];
    const currentChannelId = window.location.href.slice(-8);

    // Cache for frequently updated UI elements
    const uiElements = {
        decisionCounter: null,
        progressPercentage: null,
        progressFill: null,
        menuDetails: null,
        toggleMenuButton: null,
        dayLogsContainer: null,
    };

    async function loadData() {
        decisionCount = parseInt(await GM_getValue(GM_KEYS.DECISION_COUNT, 0)); //
        decisionMap = JSON.parse(await GM_getValue(GM_KEYS.DECISION_MAP, '{}')); //
        dayLogs = JSON.parse(await GM_getValue(GM_KEYS.DAY_LOGS, '[]')); //
        daily_target = parseInt(await GM_getValue(GM_KEYS.DAILY_TARGET, 500)); //
        non_productive_minutes = parseInt(await GM_getValue(GM_KEYS.NON_PRODUCTIVE_MINUTES, 0)); //
        updateCombinedUI();
    }

    async function saveData() {
        await GM_setValue(GM_KEYS.DECISION_COUNT, decisionCount); //
        await GM_setValue(GM_KEYS.DECISION_MAP, JSON.stringify(decisionMap)); //
        await GM_setValue(GM_KEYS.DAY_LOGS, JSON.stringify(dayLogs)); //
        await GM_setValue(GM_KEYS.DAILY_TARGET, daily_target);
        await GM_setValue(GM_KEYS.NON_PRODUCTIVE_MINUTES, non_productive_minutes);
    }

    function getAdjustedTarget() {
        const totalMinutes = working_hours * 60;
        const effectiveMinutes = totalMinutes - non_productive_minutes; //
        const ratio = Math.max(0, effectiveMinutes / totalMinutes);
        return Math.round(ratio * daily_target); //
    }

    function calculateProgress(current) {
        const target = getAdjustedTarget();
        if (target === 0) return 0; // Avoid division by zero
        return Math.min(parseFloat(((current / target) * 100).toFixed(2)), 100); //
    }

    function openSettingsDialog() {
        $(`.${CLASSES.DIALOG_OVERLAY}`).remove(); //
        const dialogHTML = `
            <div class="${CLASSES.DIALOG_OVERLAY}">
                <div class="${CLASSES.DIALOG_CONTENT}">
                    <h3 class="${CLASSES.DIALOG_TITLE}">Tracker Settings</h3>
                    <p>These settings apply to the ASIN Decisions count and progress bar.</p>
                    <p id="${IDS.DIALOG_ERROR_MESSAGE}" style="color: red; font-size: 12px; margin-bottom: 10px; min-height: 1em;"></p>
                    <label for="${IDS.TARGET_INPUT}">Daily Target (ASIN Decisions):</label>
                    <input type="number" id="${IDS.TARGET_INPUT}" value="${daily_target}" min="1">
                    <label for="${IDS.NPH_INPUT}">Non-Productive Time (minutes):</label>
                    <input type="number" id="${IDS.NPH_INPUT}" value="${non_productive_minutes}" min="0" max="480">
                    <div class="${CLASSES.DIALOG_BUTTONS}">
                        <button class="${CLASSES.CANCEL_BUTTON}">Cancel</button>
                        <button class="${CLASSES.SAVE_BUTTON}">Save</button>
                    </div>
                </div>
            </div>
        `; //

        const dialog = $(dialogHTML);
        const errorMessageElement = dialog.find(`#${IDS.DIALOG_ERROR_MESSAGE}`);

        dialog.find(`.${CLASSES.CANCEL_BUTTON}`).click(() => dialog.remove()); //
        dialog.find(`.${CLASSES.SAVE_BUTTON}`).click(() => { //
            errorMessageElement.text(''); // Clear previous error

            const newTarget = parseInt($(`#${IDS.TARGET_INPUT}`).val());
            const newNPH = parseInt($(`#${IDS.NPH_INPUT}`).val());

            if (newTarget > 0 && newNPH >= 0 && newNPH <= 480) {
                daily_target = newTarget;
                non_productive_minutes = newNPH;
                saveData(); //
                notified = false;
                updateCombinedUI();
                dialog.remove();
            } else {
                errorMessageElement.text("Please enter valid values. Daily target must be > 0, NPH between 0-480.");
            }
        });
        $('body').append(dialog); //
    }

    function getQuestionId() {
        const h5 = document.querySelector('.task-queue-title h5');
        if (!h5) return null; //
        const match = h5.textContent.match(/[a-f0-9]{32}/i);
        return match ? match[0] : null; //
    }

    function getAsinFromGrid(gridItem) {
        const asinLink = gridItem.querySelector('a');
        return asinLink ? asinLink.textContent.trim() : null; //
    }

    async function saveLap() {
        if (dayLogs.length < 5) {
            dayLogs.push(decisionCount); //
        } else {
            dayLogs.shift(); //
            dayLogs.push(decisionCount); //
        }
        await saveData(); //
        updateCombinedUI(); //
    }

    async function restoreDecisions() {
        const questionId = getQuestionId();
        if (!questionId) return; //
        document.querySelectorAll('.label-map-grid-item').forEach(grid => {
            const asin = getAsinFromGrid(grid);
            const key = `${questionId}_${asin}`;
            const decision = decisionMap[key];
            if (decision) {
                const buttons = grid.querySelectorAll('.label-map-label-button');
                buttons.forEach(btn => btn.classList.remove('selected-button')); //
                for (const btn of buttons) {
                    if (btn.textContent.trim() === decision.buttonText) {
                        btn.classList.add('selected-button');
                        grid.style.backgroundColor = 'rgba(0, 128, 0, 0.2)'; //
                        break; //
                    }
                }
            }
        });
    }

    async function clearCount() {
        if (!confirm("Are you sure you want to clear ALL ASIN decision counts and logs? This cannot be undone.")) { //
            return;
        }
        decisionCount = 0; //
        decisionMap = {}; //
        dayLogs = []; //
        await saveData(); //
        document.querySelectorAll('.label-map-grid-item').forEach(g => { //
            g.style.backgroundColor = ''; //
            g.querySelectorAll('.label-map-label-button').forEach(btn => btn.classList.remove('selected-button')); //
        });
        notified = false; //
        updateCombinedUI(); //
    }

    async function clearLastDay() {
        if (dayLogs.length > 0) {
            if (!confirm("Are you sure you want to clear the LAST day log entry?")) { //
                return;
            }
            dayLogs.pop(); //
            await saveData(); //
            updateCombinedUI(); //
        } else {
            alert("No day logs to clear."); //
        }
    }

    function downloadCSV() {
        if (dayLogs.length === 0) {
            alert("No day logs to download."); //
            return; //
        }
        let csvContent = "data:text/csv;charset=utf-8,Day,ASINs Completed\n";
        dayLogs.forEach((count, index) => { //
            csvContent += `Day ${index + 1},${count}\n`; //
        });
        const total = dayLogs.reduce((sum, val) => sum + val, 0); //
        csvContent += `\nTotal,${total}\n`; //
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement('a'); //
        link.setAttribute("href", encodedUri); //
        link.setAttribute("download", "asin_day_logs.csv"); //
        document.body.appendChild(link); //
        link.click(); //
        document.body.removeChild(link); //
    }

    function makeDraggable(elm) {
        elm.onmousedown = function (e) {
            // Prevent dragging if the click is on a button or input inside the draggable element
            if (e.target.closest('button, input, select, textarea, a')) {
                return;
            }
            let offsetX = e.clientX - elm.offsetLeft;
            let offsetY = e.clientY - elm.offsetTop; //
            function mouseMove(e) {
                elm.style.top = `${e.clientY - offsetY}px`;
                elm.style.left = `${e.clientX - offsetX}px`; //
                elm.style.right = 'auto'; //
            }
            function stopDrag() {
                document.removeEventListener('mousemove', mouseMove);
                document.removeEventListener('mouseup', stopDrag); //
            }
            document.addEventListener('mousemove', mouseMove);
            document.addEventListener('mouseup', stopDrag);
        };
    }

    async function handleDecisionClick(event) {
        const btn = event.target.closest('.label-map-label-button');
        if (!btn) return; //
        const gridItem = btn.closest('.label-map-grid-item');
        const asin = getAsinFromGrid(gridItem);
        const questionId = getQuestionId();
        if (!asin || !questionId) return; //
        const key = `${questionId}_${asin}`; //
        const prevDecision = decisionMap[key] ? decisionMap[key].buttonText : null; //

        gridItem.querySelectorAll('.label-map-label-button').forEach(b => b.classList.remove('selected-button'));
        btn.classList.add('selected-button');
        gridItem.style.backgroundColor = 'rgba(0, 128, 0, 0.2)'; //
        decisionMap[key] = { buttonText: btn.textContent.trim() }; //
        if (prevDecision === null) { //
            decisionCount++; //
        }
        await saveData(); //
        updateCombinedUI(); //
    }

    // --- HTML Generation Functions ---
    function createHeaderHTML(count) {
        return `
            <div id="asin-combined-header">
                <strong>ASIN Decisions:</strong> <span id="${IDS.DECISION_COUNTER}">${count}</span>
                <button id="${IDS.TOGGLE_MENU_BUTTON}" class="${CLASSES.HEADER_BUTTON}" aria-expanded="false">Menu ▼</button>
            </div>
        `;
    }

    function createProgressSectionHTML(progress) {
        return `
            <div class="${IDS.PROGRESS_SECTION}">
                <div class="progress-info">
                    <span class="${CLASSES.PROGRESS_PERCENTAGE}">${progress}%</span>
                </div>
                <div class="progress-bar">
                    <div class="${CLASSES.PROGRESS_FILL}" style="width: ${progress}%;" role="progressbar" aria-valuenow="${progress}" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
        `; //
    }

    function createMenuDetailsHTML(channelId) {
        return `
            <div id="${IDS.MENU_DETAILS}" class="hidden-menu" style="display: none;">
                <div class="channel-info"><strong>Channel:</strong> ${channelId}</div>
                <button id="${IDS.SETTINGS_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.SETTINGS_CLASS}">Settings</button>
                <button id="${IDS.LAP_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.DEFAULT_CLASS}">Record Day Log</button>
                <button id="${IDS.RESTORE_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.DEFAULT_CLASS}">Restore Decisions</button>
                <button id="${IDS.CLEAR_COUNT_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.DANGER_CLASS}">Clear All Count</button>
                <button id="${IDS.CLEAR_LAST_DAY_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.WARNING_CLASS} ${CLASSES.DEFAULT_CLASS}">Clear Last Day Log</button>
                <button id="${IDS.DOWNLOAD_DAYS_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.SUCCESS_CLASS}">Download CSV</button>
                <button id="${IDS.TOGGLE_DAYS_BUTTON}" class="${CLASSES.ACTION_BUTTON} ${CLASSES.DEFAULT_CLASS}">Show/Hide Day Logs</button>
                <div id="${IDS.DAY_LOGS_CONTAINER}" style="display: none; margin-top: 8px;"></div>
            </div>
        `; //
    }
    // --- End HTML Generation Functions ---

    function updateCombinedUI() {
        const currentCount = decisionCount; //
        const target = getAdjustedTarget(); //
        const progress = calculateProgress(currentCount); //
        let mainContainer = document.getElementById(IDS.MAIN_CONTAINER); //

        if (!mainContainer) { //
            mainContainer = document.createElement('div');
            mainContainer.id = IDS.MAIN_CONTAINER; //

            mainContainer.innerHTML = `
                ${createHeaderHTML(decisionCount)}
                ${createProgressSectionHTML(progress)}
                ${createMenuDetailsHTML(currentChannelId)}
            `; // (structure based on this)

            Object.assign(mainContainer.style, {
                position: 'fixed', top: '20px', right: '20px', zIndex: '9999',
                background: 'rgba(255, 255, 255, 0.95)', color: '#333', //
                padding: '6px', borderRadius: '6px', //
                boxShadow: '0 1px 3px rgba(0,0,0,0.1)', //
                maxWidth: '260px', cursor: 'grab', //
                fontFamily: 'Arial, Helvetica, sans-serif' //
            });
            document.body.appendChild(mainContainer);
            makeDraggable(mainContainer); //

            // Cache elements after creation
            uiElements.decisionCounter = document.getElementById(IDS.DECISION_COUNTER);
            uiElements.progressPercentage = mainContainer.querySelector(`.${CLASSES.PROGRESS_PERCENTAGE}`);
            uiElements.progressFill = mainContainer.querySelector(`.${CLASSES.PROGRESS_FILL}`);
            uiElements.menuDetails = document.getElementById(IDS.MENU_DETAILS);
            uiElements.toggleMenuButton = document.getElementById(IDS.TOGGLE_MENU_BUTTON);
            uiElements.dayLogsContainer = document.getElementById(IDS.DAY_LOGS_CONTAINER);

            // Set initial ARIA attributes for progress bar (already in createProgressSectionHTML)
            // uiElements.progressFill.setAttribute('aria-valuemin', '0');
            // uiElements.progressFill.setAttribute('aria-valuemax', '100');


            // Attach event listeners
            if(uiElements.toggleMenuButton) {
                uiElements.toggleMenuButton.onclick = () => { //
                    const isHidden = uiElements.menuDetails.style.display === 'none';
                    uiElements.menuDetails.style.display = isHidden ? 'block' : 'none'; //
                    uiElements.toggleMenuButton.textContent = isHidden ? 'Menu ▲' : 'Menu ▼'; //
                    uiElements.toggleMenuButton.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
                };
            }
            document.getElementById(IDS.SETTINGS_BUTTON).onclick = openSettingsDialog; //
            document.getElementById(IDS.LAP_BUTTON).onclick = saveLap; //
            document.getElementById(IDS.RESTORE_BUTTON).onclick = restoreDecisions; //
            document.getElementById(IDS.CLEAR_COUNT_BUTTON).onclick = clearCount; //
            document.getElementById(IDS.CLEAR_LAST_DAY_BUTTON).onclick = clearLastDay; //
            document.getElementById(IDS.DOWNLOAD_DAYS_BUTTON).onclick = downloadCSV; //
            document.getElementById(IDS.TOGGLE_DAYS_BUTTON).onclick = () => { //
                if (uiElements.dayLogsContainer) {
                    const isHidden = uiElements.dayLogsContainer.style.display === 'none';
                    uiElements.dayLogsContainer.style.display = isHidden ? 'block' : 'none'; //
                }
            };
        }

        // Always update dynamic content using cached elements
        if (uiElements.decisionCounter) uiElements.decisionCounter.textContent = decisionCount; //
        if (uiElements.progressPercentage) uiElements.progressPercentage.textContent = `${progress}%`; //
        if (uiElements.progressFill) {
            uiElements.progressFill.style.width = `${progress}%`; //
            uiElements.progressFill.setAttribute('aria-valuenow', progress);
        }

        updateDayLogs(uiElements.dayLogsContainer); //

        if (progress >= 100 && !notified) {
            notified = true;
            alert("🎉 Congratulations! You've reached your target!"); //
        }
    }

    function updateDayLogs(logContainer) { // Added logContainer parameter
        if (!logContainer) return; //
        logContainer.innerHTML = ''; //
        if (dayLogs.length === 0) {
            logContainer.innerHTML = '<div style="color: #777; text-align: center; padding: 5px 0; font-size: 12px;">No day logs.</div>'; //
            return; //
        }
        for (let i = 0; i < dayLogs.length; i++) {
            const day = document.createElement('div');
            day.textContent = `Day ${i + 1}: ${dayLogs[i] || 0}`; //
            day.style.cssText = `
                padding: 4px 0;
                border-bottom: 1px dashed #EEE;
                color: #555;
                font-size: 12px;
            `; //
            logContainer.appendChild(day); //
        }
        if (logContainer.lastChild) { //
             logContainer.lastChild.style.borderBottom = 'none'; //
        }
    }

    // Value change listeners for cross-tab synchronization
    GM_addValueChangeListener(GM_KEYS.DECISION_MAP, (name, old_value, new_value) => { //
        decisionMap = JSON.parse(new_value); //
        updateCombinedUI(); //
    });
    GM_addValueChangeListener(GM_KEYS.DECISION_COUNT, (name, old_value, new_value) => { //
        decisionCount = parseInt(new_value); //
        updateCombinedUI(); //
    });
    GM_addValueChangeListener(GM_KEYS.DAY_LOGS, (name, old_value, new_value) => { //
        dayLogs = JSON.parse(new_value); //
        updateCombinedUI(); //
    });
    GM_addValueChangeListener(GM_KEYS.DAILY_TARGET, (name, old_value, new_value) => { //
        daily_target = parseInt(new_value); //
        updateCombinedUI(); //
    });
    GM_addValueChangeListener(GM_KEYS.NON_PRODUCTIVE_MINUTES, (name, old_value, new_value) => { //
        non_productive_minutes = parseInt(new_value); //
        updateCombinedUI(); //
    });

    GM_addStyle(`
        #${IDS.MAIN_CONTAINER} {
            font-family: Arial, Helvetica, sans-serif; /* Changed font */ /* */
            font-size: 13px; /* Base font size for container */ /* */
            padding: 6px; /* */
            border-radius: 6px; /* */
        }
        .selected-button { /* For ASIN grid selection, not UI buttons */
            outline: 3px solid #28a745 !important; /* Green highlight */ /* */
        }

        /* --- General Button Styling --- */
        #${IDS.MAIN_CONTAINER} button {
            border-radius: 4px; /* Softer radius */ /* */
            padding: 6px 10px; /* Compact padding */ /* */
            margin: 3px 0; /* Compact margin */ /* */
            font-size: 12px; /* Smaller font for action buttons */ /* */
            cursor: pointer; /* */
            width: 100%; /* */
            text-align: center; /* */
            display: block; /* */
            box-sizing: border-box; /* */
            transition: background-color 0.15s ease, border-color 0.15s ease, opacity 0.15s ease; /* */
        }
        #${IDS.MAIN_CONTAINER} button:hover {
            opacity: 0.85; /* */
        }

        /* --- Header Styling --- */
        #asin-combined-header { /* ID from createHeaderHTML */
            display: flex; /* */
            justify-content: space-between; /* */
            align-items: center; /* */
            padding-bottom: 4px; /* Modified */ /* */
            margin-bottom: 4px; /* Modified */ /* */
            border-bottom: 1px solid #EEEEEE; /* */
            color: #5A5A5A; /* Primary gray accent */ /* */
            font-size: 14px; /* Base for "ASIN Decisions:" label */ /* */
        }
        #asin-combined-header strong { /* ID from createHeaderHTML */
             font-weight: 600; /* Slightly less heavy than default bold */ /* */
        }
        #${IDS.TOGGLE_MENU_BUTTON}.${CLASSES.HEADER_BUTTON} { /* Menu Button */
            background-color: #6c757d; /* Bootstrap secondary gray */ /* */
            color: white; /* */
            border: none; /* */
            padding: 4px 8px; /* Modified */ /* */
            font-size: 11px; /* Modified */ /* */
            min-width: 60px; /* Adjusted */ /* */
            width: auto; /* */
            box-shadow: none; /* */
        }
        #${IDS.TOGGLE_MENU_BUTTON}.${CLASSES.HEADER_BUTTON}:hover {
            background-color: #5a6268; /* */
            opacity: 1; /* */
        }
        #${IDS.DECISION_COUNTER} { /* ID from createHeaderHTML */
            font-size: 16px; /* Modified */ /* */
            color: #333333; /* Darker for count */ /* */
            font-weight: 600; /* */
            margin-left: 4px; /* */
        }

        /* --- Progress Section Styling --- */
        .${IDS.PROGRESS_SECTION} { /* Class from createProgressSectionHTML, or use ID if preferred */
            background: #F8F9FA; /* Lighter gray */ /* */
            padding: 5px 6px; /* Modified */ /* */
            border-radius: 5px; /* Modified */ /* */
            margin-bottom: 6px; /* Modified */ /* */
        }
        .progress-info { /* Class from createProgressSectionHTML */
            display: flex; /* */
            justify-content: flex-end; /* */
            align-items: center; /* */
            margin-bottom: 3px; /* Modified */ /* */
        }
        .${CLASSES.PROGRESS_PERCENTAGE} { /* Class from createProgressSectionHTML */
            font-size: 11px; /* Modified */ /* */
            color: #5A5A5A; /* */
        }
        .progress-bar { /* Class from createProgressSectionHTML */
            height: 6px; /* Modified */ /* */
            background-color: #E9ECEF; /* Light gray track */ /* */
            border-radius: 3px; /* Modified */ /* */
            overflow: hidden; /* */
        }
        .${CLASSES.PROGRESS_FILL} { /* Class from createProgressSectionHTML */
            height: 100%; /* */
            background-color: #5A5A5A; /* Primary gray accent */ /* */
            border-radius: 3px; /* Modified */ /* */
            transition: width 0.4s ease-in-out; /* */
        }

        /* --- Menu Details & Action Buttons Styling --- */
        #${IDS.MENU_DETAILS} { /* ID from createMenuDetailsHTML */
            padding-top: 6px; /* */
            border-top: 1px solid #EEEEEE; /* */
            margin-top: 6px; /* */
        }
        .${CLASSES.ACTION_BUTTON} {
            border: 1px solid #CED4DA; /* Default border */ /* */
            background-color: #F8F9FA; /* Default light background */ /* */
            color: #333333; /* Default text color */ /* */
            box-shadow: none; /* */
        }
        .${CLASSES.ACTION_BUTTON}:hover {
            background-color: #E9ECEF; /* Slightly darker on hover */ /* */
            border-color: #ADB5BD; /* */
            opacity: 1; /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.SETTINGS_CLASS} {
             background-color: #6c757d; /* Bootstrap secondary gray */ /* */
             color: white; /* */
             border-color: #6c757d; /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.SETTINGS_CLASS}:hover {
             background-color: #5a6268; /* */
             border-color: #545b62; /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.DANGER_CLASS} {
            background-color: #DC3545; /* Muted Red */ /* */
            color: white; /* */
            border: none; /* */
            box-shadow: 0 1px 2px rgba(0,0,0,0.07); /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.DANGER_CLASS}:hover {
            background-color: #C82333; /* */
            opacity: 1; /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.SUCCESS_CLASS} {
            background-color: #28A745; /* Muted Green */ /* */
            color: white; /* */
            border: none; /* */
            box-shadow: 0 1px 2px rgba(0,0,0,0.07); /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.SUCCESS_CLASS}:hover {
            background-color: #218838; /* */
            opacity: 1; /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.WARNING_CLASS} {
            background-color: #FFC107; /* */
            color: #212529; border: none; /* */
            box-shadow: 0 1px 2px rgba(0,0,0,0.07); /* */
        }
        .${CLASSES.ACTION_BUTTON}.${CLASSES.WARNING_CLASS}:hover {
            background-color: #E0A800; /* */
            opacity:1; /* */
        }

        /* --- Day Logs Styling --- */
        #${IDS.DAY_LOGS_CONTAINER} div { /* ID from createMenuDetailsHTML */
            padding: 4px 0; /* Compact */ /* */
            border-bottom: 1px dashed #EEEEEE; /* */
            color: #555555; /* */
            font-size: 12px; /* Compact */ /* */
            text-align: left; /* */
        }
        #${IDS.DAY_LOGS_CONTAINER} div:last-child { /* ID from createMenuDetailsHTML */
            border-bottom: none; /* */
        }
        .channel-info { /* Class from createMenuDetailsHTML */
            padding: 4px 0 8px; /* */
            color: #6c757d; /* */
            font-size: 11px; /* Compact */ /* */
            border-bottom: 1px solid #EEEEEE; /* */
            margin-bottom: 8px; /* */
            text-align: center; /* */
        }

        /* --- Settings Dialog Styling (Minimal Changes for consistency) --- */
        .${CLASSES.DIALOG_OVERLAY} { /* Class for dialog */
            position: fixed; /* */
            top: 0; left: 0; right: 0; bottom: 0; /* */
            background: rgba(0,0,0,0.4); /* Slightly lighter backdrop */ /* */
            display: flex; justify-content: center; /* */
            align-items: center; /* */
            z-index: 10000; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_CONTENT} { /* Class for dialog */
            background: #FFFFFF; /* */
            padding: 20px; /* Slightly more compact */ /* */
            border-radius: 6px; /* */
            width: 320px; /* Slightly smaller */ /* */
            box-shadow: 0 4px 15px rgba(0,0,0,0.15); /* */
            font-family: Arial, Helvetica, sans-serif; /* Changed font */ /* */
            color: #333333; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_TITLE} { /* Class for dialog */
            margin: 0 0 15px; /* */
            font-size: 18px; /* Compact */ /* */
            color: #5A5A5A; /* Primary gray accent */ /* */
            border-bottom: 1px solid #EEEEEE; /* */
            padding-bottom: 8px; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} p { /* Class for dialog */
            font-size: 12px; /* Compact */ /* */
            color: #666666; /* */
            margin-bottom: 12px; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} #${IDS.DIALOG_ERROR_MESSAGE} { /* Error message styling */
             color: #DC3545; /* Muted Red for error */
             font-size: 12px;
             margin-bottom: 10px;
             min-height: 1em; /* To prevent layout shifts */
        }
        .${CLASSES.DIALOG_OVERLAY} label { /* Class for dialog */
            display: block; /* */
            margin-bottom: 6px; /* */
            font-weight: 600; /* */
            color: #444444; /* */
            font-size: 12px; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} input[type="number"] { /* Class for dialog */
            width: calc(100% - 16px); /* Adjusted for padding */ /* */
            padding: 8px; /* Compact */ /* */
            margin-bottom: 15px; /* */
            border: 1px solid #CED4DA; /* */
            border-radius: 4px; /* */
            font-size: 13px; /* */
            box-sizing: border-box; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_BUTTONS} { /* Class for dialog */
            display: flex; /* */
            justify-content: flex-end; /* */
            gap: 8px; /* Compact gap */ /* */
            margin-top: 15px; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_BUTTONS} button { /* Class for dialog */
            padding: 8px 15px; /* Compact */ /* */
            font-size: 13px; /* Compact */ /* */
            border-radius: 4px; /* */
            cursor: pointer; /* */
            width: auto; /* */
            box-shadow: none; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_BUTTONS} .${CLASSES.CANCEL_BUTTON} { /* Class for dialog */
            background: #E9ECEF; /* */
            color: #333333; /* */
            border: 1px solid #CED4DA; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_BUTTONS} .${CLASSES.CANCEL_BUTTON}:hover { /* Class for dialog */
            background: #DEE2E6; /* */
            border-color: #ADB5BD; /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_BUTTONS} .${CLASSES.SAVE_BUTTON} { /* Class for dialog */
            background: #5A5A5A; /* Primary gray accent */ /* */
            color: white; /* */
            border: none; /* No border for primary action */ /* */
        }
        .${CLASSES.DIALOG_OVERLAY} .${CLASSES.DIALOG_BUTTONS} .${CLASSES.SAVE_BUTTON}:hover { /* Class for dialog */
            background: #4A4A4A; /* */
        }
    `);

    // Initial load and event listeners
    document.addEventListener('click', handleDecisionClick, true); //
    waitForKeyElements("div.task-queue-right", loadData); //
})();

